/* Reed-Solomon encoder
 * Copyright 2002, Phil Karn, KA9Q
 * May be used under the terms of the GNU General Public License (GPL)
 */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <vector>
#include "ReedSolomon.h"
#include "rs_encode.h"
#include <iostream>
#include "debug.h"
int main()
{
  //Generate bogus data
  std::vector<unsigned char> pkt;
  std::vector<unsigned char> pkt2;
  unsigned char tal[] = { 0x8d, 0xef, 0xec, 0x86, 0xfa, 0x99, 0xaf, 0x7b };
  for (int i = 0; i < 128; i++)
    {
      pkt.push_back(tal[i%8]);
      pkt2.push_back(tal[i%8]);
    }
  //std::cout <<"Original data. Frame size = " << pkt.size() << std::endl; 
  //hexdump(pkt.data(),pkt.size());
  
  unsigned char *data;
  data = (unsigned char *)malloc(pkt.size());
  unsigned char *parity;
  parity = (unsigned char *)malloc(32);

  //Removing AX25 header and copy pkt to data. New packet size pkt.size() - 16
  std::copy(pkt.begin(),pkt.end(),data);

  //Reed-Solomon coding
  encode_rs_8(data,parity,255 - (pkt.size()) - 32);
  //std::cout << "parity data" << std::endl;

      
  //Appending parity bits
  for (int i = 0; i < 32; i++)
    {
      pkt.push_back(parity[i]);
    }
  /*
  //RS.Encode_RS(data);
  std::cout <<"Encoded data. Frame size = " << pkt.size() << std::endl; 
  hexdump(pkt.data(),pkt.size());


  std::cout <<"  ========================================= " << std::endl;
  std::cout <<"  Testing C++ implementation                " << std::endl;
  std::cout <<  std::endl <<  std::endl ;*/

  //Initializing RS object
  ReedSolomon RS(16,2);
  RS.Encode_RS(pkt2);
  // std::cout <<"Encoded packet 2. Frame size = " << pkt2.size() << std::endl; 
  // hexdump(pkt2.data(),pkt2.size());
  
  return 0;
}
