/* Reed-Solomon encoder
 * Copyright 2002, Phil Karn, KA9Q
 * May be used under the terms of the GNU General Public License (GPL)
 */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <vector>
#include <iostream>

typedef unsigned char crc;
#define WIDTH  (8 * sizeof(crc))
#define TOPBIT (1 << (WIDTH - 1))

#define POLYNOMIAL 0xD8  /* 11011 followed by 0's */
crc
crcNaive(crc const message)
{
    crc  remainder;	


    /*
     * Initially, the dividend is the remainder.
     */
    remainder = message;

    /*
     * For each bit position in the message....
     */
    for (crc bit = 8; bit > 0; --bit)
    {
        /*
         * If the uppermost bit is a 1...
         */
        if (remainder & 0x80)
        {
            /*
             * XOR the previous remainder with the divisor.
             */
            remainder ^= POLYNOMIAL;
        }

        /*
         * Shift the next bit of the message into the remainder.
         */
        remainder = (remainder << 1);
    }

    /*
     * Return only the relevant bits of the remainder as CRC.
     */
    return (remainder >> 4);

}   /* crcNaive() */

crc
crcSlow(crc const message[], int nBytes)
{
    crc  remainder = 0;	


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (int byte = 0; byte < nBytes; ++byte)
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (message[byte] << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (crc bit = 8; bit > 0; --bit)
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
            }
            else
            {
                remainder = (remainder << 1);
            }
        }
    }

    /*
     * The final remainder is the CRC result.
     */
    return (remainder);

}   /* crcSlow() */

int main()
{
  /*
  //Naive CRC
  crc message = 0xE5;
  crc rem = crcNaive(message);
  rem &=0xff;
  std::cout << "Naive CRC: " << int(rem) << std::endl;*/
  std::cout << "WIDTH : " <<  WIDTH << std::endl;
  std::cout << "TOPBIT: " <<  TOPBIT<< std::endl;
  unsigned char message[] = {0xe5, 0xbb, 0xcd, 0xdd, 0xee, 0xff, 0x11, 0x22};
  //unsigned char message[] = {0xe5},
  crc rem = crcSlow(message,1);
  rem &= 0xff;
  std::cout << "Slow CRC: " << int(rem) << std::endl;  
  return 0;
}
