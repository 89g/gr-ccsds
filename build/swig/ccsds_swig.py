# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccsds_swig', [dirname(__file__)])
        except ImportError:
            import _ccsds_swig
            return _ccsds_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ccsds_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccsds_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ccsds_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_epoch()
class convEncoder(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::convEncoder.

    To avoid accidental use of raw pointers, ccsds::convEncoder's constructor is in a private implementation class. ccsds::convEncoder::make is the public interface for creating new instances.

    Args:
        invert : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(invert):
        """
        make(int invert) -> convEncoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::convEncoder.

        To avoid accidental use of raw pointers, ccsds::convEncoder's constructor is in a private implementation class. ccsds::convEncoder::make is the public interface for creating new instances.

        Args:
            invert : 
        """
        return _ccsds_swig.convEncoder_make(invert)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_convEncoder
    __del__ = lambda self: None
convEncoder_swigregister = _ccsds_swig.convEncoder_swigregister
convEncoder_swigregister(convEncoder)

def convEncoder_make(invert):
    """
    convEncoder_make(int invert) -> convEncoder_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::convEncoder.

    To avoid accidental use of raw pointers, ccsds::convEncoder's constructor is in a private implementation class. ccsds::convEncoder::make is the public interface for creating new instances.

    Args:
        invert : 
    """
    return _ccsds_swig.convEncoder_make(invert)

class convEncoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::convEncoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::convEncoder)> self) -> convEncoder_sptr
        __init__(boost::shared_ptr<(gr::ccsds::convEncoder)> self, convEncoder p) -> convEncoder_sptr
        """
        this = _ccsds_swig.new_convEncoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(convEncoder_sptr self) -> convEncoder"""
        return _ccsds_swig.convEncoder_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_convEncoder_sptr
    __del__ = lambda self: None

    def make(self, invert):
        """
        make(convEncoder_sptr self, int invert) -> convEncoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::convEncoder.

        To avoid accidental use of raw pointers, ccsds::convEncoder's constructor is in a private implementation class. ccsds::convEncoder::make is the public interface for creating new instances.

        Args:
            invert : 
        """
        return _ccsds_swig.convEncoder_sptr_make(self, invert)


    def history(self):
        """history(convEncoder_sptr self) -> unsigned int"""
        return _ccsds_swig.convEncoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(convEncoder_sptr self, int which, int delay)
        declare_sample_delay(convEncoder_sptr self, unsigned int delay)
        """
        return _ccsds_swig.convEncoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(convEncoder_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.convEncoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(convEncoder_sptr self) -> int"""
        return _ccsds_swig.convEncoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(convEncoder_sptr self) -> double"""
        return _ccsds_swig.convEncoder_sptr_relative_rate(self)


    def start(self):
        """start(convEncoder_sptr self) -> bool"""
        return _ccsds_swig.convEncoder_sptr_start(self)


    def stop(self):
        """stop(convEncoder_sptr self) -> bool"""
        return _ccsds_swig.convEncoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(convEncoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.convEncoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(convEncoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.convEncoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(convEncoder_sptr self) -> int"""
        return _ccsds_swig.convEncoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(convEncoder_sptr self, int m)"""
        return _ccsds_swig.convEncoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(convEncoder_sptr self)"""
        return _ccsds_swig.convEncoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(convEncoder_sptr self) -> bool"""
        return _ccsds_swig.convEncoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(convEncoder_sptr self, int m)"""
        return _ccsds_swig.convEncoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(convEncoder_sptr self) -> int"""
        return _ccsds_swig.convEncoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(convEncoder_sptr self, int i) -> long"""
        return _ccsds_swig.convEncoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(convEncoder_sptr self, long max_output_buffer)
        set_max_output_buffer(convEncoder_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.convEncoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(convEncoder_sptr self, int i) -> long"""
        return _ccsds_swig.convEncoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(convEncoder_sptr self, long min_output_buffer)
        set_min_output_buffer(convEncoder_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.convEncoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(convEncoder_sptr self, int which) -> float
        pc_input_buffers_full(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(convEncoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(convEncoder_sptr self, int which) -> float
        pc_input_buffers_full_var(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(convEncoder_sptr self, int which) -> float
        pc_output_buffers_full(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(convEncoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(convEncoder_sptr self, int which) -> float
        pc_output_buffers_full_var(convEncoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.convEncoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(convEncoder_sptr self) -> float"""
        return _ccsds_swig.convEncoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(convEncoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.convEncoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(convEncoder_sptr self)"""
        return _ccsds_swig.convEncoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(convEncoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.convEncoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(convEncoder_sptr self) -> int"""
        return _ccsds_swig.convEncoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(convEncoder_sptr self) -> int"""
        return _ccsds_swig.convEncoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(convEncoder_sptr self, int priority) -> int"""
        return _ccsds_swig.convEncoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(convEncoder_sptr self) -> std::string"""
        return _ccsds_swig.convEncoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(convEncoder_sptr self) -> std::string"""
        return _ccsds_swig.convEncoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(convEncoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.convEncoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(convEncoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.convEncoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(convEncoder_sptr self) -> long"""
        return _ccsds_swig.convEncoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(convEncoder_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.convEncoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(convEncoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.convEncoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(convEncoder_sptr self) -> std::string"""
        return _ccsds_swig.convEncoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(convEncoder_sptr self, std::string name)"""
        return _ccsds_swig.convEncoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(convEncoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.convEncoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(convEncoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.convEncoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(convEncoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.convEncoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(convEncoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.convEncoder_sptr_message_subscribers(self, which_port)

convEncoder_sptr_swigregister = _ccsds_swig.convEncoder_sptr_swigregister
convEncoder_sptr_swigregister(convEncoder_sptr)


convEncoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
convEncoder = convEncoder.make;

class convDecoder(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::convDecoder.

    To avoid accidental use of raw pointers, ccsds::convDecoder's constructor is in a private implementation class. ccsds::convDecoder::make is the public interface for creating new instances.

    Args:
        frame_size : 
        polys : 
        mode : 
        pad : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_size, polys, mode, pad):
        """
        make(int frame_size, std::vector< int,std::allocator< int > > polys, int mode, int pad) -> convDecoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::convDecoder.

        To avoid accidental use of raw pointers, ccsds::convDecoder's constructor is in a private implementation class. ccsds::convDecoder::make is the public interface for creating new instances.

        Args:
            frame_size : 
            polys : 
            mode : 
            pad : 
        """
        return _ccsds_swig.convDecoder_make(frame_size, polys, mode, pad)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_convDecoder
    __del__ = lambda self: None
convDecoder_swigregister = _ccsds_swig.convDecoder_swigregister
convDecoder_swigregister(convDecoder)

def convDecoder_make(frame_size, polys, mode, pad):
    """
    convDecoder_make(int frame_size, std::vector< int,std::allocator< int > > polys, int mode, int pad) -> convDecoder_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::convDecoder.

    To avoid accidental use of raw pointers, ccsds::convDecoder's constructor is in a private implementation class. ccsds::convDecoder::make is the public interface for creating new instances.

    Args:
        frame_size : 
        polys : 
        mode : 
        pad : 
    """
    return _ccsds_swig.convDecoder_make(frame_size, polys, mode, pad)

class convDecoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::convDecoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::convDecoder)> self) -> convDecoder_sptr
        __init__(boost::shared_ptr<(gr::ccsds::convDecoder)> self, convDecoder p) -> convDecoder_sptr
        """
        this = _ccsds_swig.new_convDecoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(convDecoder_sptr self) -> convDecoder"""
        return _ccsds_swig.convDecoder_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_convDecoder_sptr
    __del__ = lambda self: None

    def make(self, frame_size, polys, mode, pad):
        """
        make(convDecoder_sptr self, int frame_size, std::vector< int,std::allocator< int > > polys, int mode, int pad) -> convDecoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::convDecoder.

        To avoid accidental use of raw pointers, ccsds::convDecoder's constructor is in a private implementation class. ccsds::convDecoder::make is the public interface for creating new instances.

        Args:
            frame_size : 
            polys : 
            mode : 
            pad : 
        """
        return _ccsds_swig.convDecoder_sptr_make(self, frame_size, polys, mode, pad)


    def primitive_connect(self, *args):
        """
        primitive_connect(convDecoder_sptr self, basic_block_sptr block)
        primitive_connect(convDecoder_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.convDecoder_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(convDecoder_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(convDecoder_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.convDecoder_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(convDecoder_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(convDecoder_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.convDecoder_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(convDecoder_sptr self, basic_block_sptr block)
        primitive_disconnect(convDecoder_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.convDecoder_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(convDecoder_sptr self)"""
        return _ccsds_swig.convDecoder_sptr_disconnect_all(self)


    def lock(self):
        """lock(convDecoder_sptr self)"""
        return _ccsds_swig.convDecoder_sptr_lock(self)


    def unlock(self):
        """unlock(convDecoder_sptr self)"""
        return _ccsds_swig.convDecoder_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(convDecoder_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.convDecoder_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(convDecoder_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.convDecoder_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(convDecoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.convDecoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(convDecoder_sptr self)"""
        return _ccsds_swig.convDecoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(convDecoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.convDecoder_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(convDecoder_sptr self, int i) -> size_t"""
        return _ccsds_swig.convDecoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(convDecoder_sptr self, size_t max_output_buffer)
        set_max_output_buffer(convDecoder_sptr self, int port, size_t max_output_buffer)
        """
        return _ccsds_swig.convDecoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(convDecoder_sptr self, int i) -> size_t"""
        return _ccsds_swig.convDecoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(convDecoder_sptr self, size_t min_output_buffer)
        set_min_output_buffer(convDecoder_sptr self, int port, size_t min_output_buffer)
        """
        return _ccsds_swig.convDecoder_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(convDecoder_sptr self) -> hier_block2_sptr"""
        return _ccsds_swig.convDecoder_sptr_to_hier_block2(self)


    def name(self):
        """name(convDecoder_sptr self) -> std::string"""
        return _ccsds_swig.convDecoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(convDecoder_sptr self) -> std::string"""
        return _ccsds_swig.convDecoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(convDecoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.convDecoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(convDecoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.convDecoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(convDecoder_sptr self) -> long"""
        return _ccsds_swig.convDecoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(convDecoder_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.convDecoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(convDecoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.convDecoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(convDecoder_sptr self) -> std::string"""
        return _ccsds_swig.convDecoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(convDecoder_sptr self, std::string name)"""
        return _ccsds_swig.convDecoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(convDecoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.convDecoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(convDecoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.convDecoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(convDecoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.convDecoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(convDecoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.convDecoder_sptr_message_subscribers(self, which_port)

convDecoder_sptr_swigregister = _ccsds_swig.convDecoder_sptr_swigregister
convDecoder_sptr_swigregister(convDecoder_sptr)


convDecoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
convDecoder = convDecoder.make;

class generateCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::generateCADU.

    To avoid accidental use of raw pointers, ccsds::generateCADU's constructor is in a private implementation class. ccsds::generateCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        sync : 
        scramble : 
        rs : 
        intDepth : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frameLength, sync, scramble, rs, intDepth):
        """
        make(int frameLength, std::string sync, int scramble, int rs, int intDepth) -> generateCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::generateCADU.

        To avoid accidental use of raw pointers, ccsds::generateCADU's constructor is in a private implementation class. ccsds::generateCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            sync : 
            scramble : 
            rs : 
            intDepth : 
        """
        return _ccsds_swig.generateCADU_make(frameLength, sync, scramble, rs, intDepth)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_generateCADU
    __del__ = lambda self: None
generateCADU_swigregister = _ccsds_swig.generateCADU_swigregister
generateCADU_swigregister(generateCADU)

def generateCADU_make(frameLength, sync, scramble, rs, intDepth):
    """
    generateCADU_make(int frameLength, std::string sync, int scramble, int rs, int intDepth) -> generateCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::generateCADU.

    To avoid accidental use of raw pointers, ccsds::generateCADU's constructor is in a private implementation class. ccsds::generateCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        sync : 
        scramble : 
        rs : 
        intDepth : 
    """
    return _ccsds_swig.generateCADU_make(frameLength, sync, scramble, rs, intDepth)

class generateCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::generateCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::generateCADU)> self) -> generateCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::generateCADU)> self, generateCADU p) -> generateCADU_sptr
        """
        this = _ccsds_swig.new_generateCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(generateCADU_sptr self) -> generateCADU"""
        return _ccsds_swig.generateCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_generateCADU_sptr
    __del__ = lambda self: None

    def make(self, frameLength, sync, scramble, rs, intDepth):
        """
        make(generateCADU_sptr self, int frameLength, std::string sync, int scramble, int rs, int intDepth) -> generateCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::generateCADU.

        To avoid accidental use of raw pointers, ccsds::generateCADU's constructor is in a private implementation class. ccsds::generateCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            sync : 
            scramble : 
            rs : 
            intDepth : 
        """
        return _ccsds_swig.generateCADU_sptr_make(self, frameLength, sync, scramble, rs, intDepth)


    def history(self):
        """history(generateCADU_sptr self) -> unsigned int"""
        return _ccsds_swig.generateCADU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(generateCADU_sptr self, int which, int delay)
        declare_sample_delay(generateCADU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.generateCADU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(generateCADU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.generateCADU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(generateCADU_sptr self) -> int"""
        return _ccsds_swig.generateCADU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(generateCADU_sptr self) -> double"""
        return _ccsds_swig.generateCADU_sptr_relative_rate(self)


    def start(self):
        """start(generateCADU_sptr self) -> bool"""
        return _ccsds_swig.generateCADU_sptr_start(self)


    def stop(self):
        """stop(generateCADU_sptr self) -> bool"""
        return _ccsds_swig.generateCADU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(generateCADU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.generateCADU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(generateCADU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.generateCADU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(generateCADU_sptr self) -> int"""
        return _ccsds_swig.generateCADU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(generateCADU_sptr self, int m)"""
        return _ccsds_swig.generateCADU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(generateCADU_sptr self)"""
        return _ccsds_swig.generateCADU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(generateCADU_sptr self) -> bool"""
        return _ccsds_swig.generateCADU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(generateCADU_sptr self, int m)"""
        return _ccsds_swig.generateCADU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(generateCADU_sptr self) -> int"""
        return _ccsds_swig.generateCADU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(generateCADU_sptr self, int i) -> long"""
        return _ccsds_swig.generateCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(generateCADU_sptr self, long max_output_buffer)
        set_max_output_buffer(generateCADU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.generateCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(generateCADU_sptr self, int i) -> long"""
        return _ccsds_swig.generateCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(generateCADU_sptr self, long min_output_buffer)
        set_min_output_buffer(generateCADU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.generateCADU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(generateCADU_sptr self, int which) -> float
        pc_input_buffers_full(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(generateCADU_sptr self, int which) -> float
        pc_input_buffers_full_avg(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(generateCADU_sptr self, int which) -> float
        pc_input_buffers_full_var(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(generateCADU_sptr self, int which) -> float
        pc_output_buffers_full(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(generateCADU_sptr self, int which) -> float
        pc_output_buffers_full_avg(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(generateCADU_sptr self, int which) -> float
        pc_output_buffers_full_var(generateCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCADU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(generateCADU_sptr self) -> float"""
        return _ccsds_swig.generateCADU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(generateCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.generateCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(generateCADU_sptr self)"""
        return _ccsds_swig.generateCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(generateCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.generateCADU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(generateCADU_sptr self) -> int"""
        return _ccsds_swig.generateCADU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(generateCADU_sptr self) -> int"""
        return _ccsds_swig.generateCADU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(generateCADU_sptr self, int priority) -> int"""
        return _ccsds_swig.generateCADU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(generateCADU_sptr self) -> std::string"""
        return _ccsds_swig.generateCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(generateCADU_sptr self) -> std::string"""
        return _ccsds_swig.generateCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(generateCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.generateCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(generateCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.generateCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(generateCADU_sptr self) -> long"""
        return _ccsds_swig.generateCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(generateCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.generateCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(generateCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.generateCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(generateCADU_sptr self) -> std::string"""
        return _ccsds_swig.generateCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(generateCADU_sptr self, std::string name)"""
        return _ccsds_swig.generateCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(generateCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.generateCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(generateCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.generateCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(generateCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.generateCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(generateCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.generateCADU_sptr_message_subscribers(self, which_port)

generateCADU_sptr_swigregister = _ccsds_swig.generateCADU_sptr_swigregister
generateCADU_sptr_swigregister(generateCADU_sptr)


generateCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
generateCADU = generateCADU.make;

class processCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::processCADU.

    To avoid accidental use of raw pointers, ccsds::processCADU's constructor is in a private implementation class. ccsds::processCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        scramble : 
        rs : 
        intDepth : 
        tagName : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frameLength, scramble, rs, intDepth, tagName):
        """
        make(int frameLength, int scramble, int rs, int intDepth, std::string tagName) -> processCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::processCADU.

        To avoid accidental use of raw pointers, ccsds::processCADU's constructor is in a private implementation class. ccsds::processCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            scramble : 
            rs : 
            intDepth : 
            tagName : 
        """
        return _ccsds_swig.processCADU_make(frameLength, scramble, rs, intDepth, tagName)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_processCADU
    __del__ = lambda self: None
processCADU_swigregister = _ccsds_swig.processCADU_swigregister
processCADU_swigregister(processCADU)

def processCADU_make(frameLength, scramble, rs, intDepth, tagName):
    """
    processCADU_make(int frameLength, int scramble, int rs, int intDepth, std::string tagName) -> processCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::processCADU.

    To avoid accidental use of raw pointers, ccsds::processCADU's constructor is in a private implementation class. ccsds::processCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        scramble : 
        rs : 
        intDepth : 
        tagName : 
    """
    return _ccsds_swig.processCADU_make(frameLength, scramble, rs, intDepth, tagName)

class processCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::processCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::processCADU)> self) -> processCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::processCADU)> self, processCADU p) -> processCADU_sptr
        """
        this = _ccsds_swig.new_processCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(processCADU_sptr self) -> processCADU"""
        return _ccsds_swig.processCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_processCADU_sptr
    __del__ = lambda self: None

    def make(self, frameLength, scramble, rs, intDepth, tagName):
        """
        make(processCADU_sptr self, int frameLength, int scramble, int rs, int intDepth, std::string tagName) -> processCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::processCADU.

        To avoid accidental use of raw pointers, ccsds::processCADU's constructor is in a private implementation class. ccsds::processCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            scramble : 
            rs : 
            intDepth : 
            tagName : 
        """
        return _ccsds_swig.processCADU_sptr_make(self, frameLength, scramble, rs, intDepth, tagName)


    def history(self):
        """history(processCADU_sptr self) -> unsigned int"""
        return _ccsds_swig.processCADU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(processCADU_sptr self, int which, int delay)
        declare_sample_delay(processCADU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.processCADU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(processCADU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.processCADU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(processCADU_sptr self) -> int"""
        return _ccsds_swig.processCADU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(processCADU_sptr self) -> double"""
        return _ccsds_swig.processCADU_sptr_relative_rate(self)


    def start(self):
        """start(processCADU_sptr self) -> bool"""
        return _ccsds_swig.processCADU_sptr_start(self)


    def stop(self):
        """stop(processCADU_sptr self) -> bool"""
        return _ccsds_swig.processCADU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(processCADU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.processCADU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(processCADU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.processCADU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(processCADU_sptr self) -> int"""
        return _ccsds_swig.processCADU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(processCADU_sptr self, int m)"""
        return _ccsds_swig.processCADU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(processCADU_sptr self)"""
        return _ccsds_swig.processCADU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(processCADU_sptr self) -> bool"""
        return _ccsds_swig.processCADU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(processCADU_sptr self, int m)"""
        return _ccsds_swig.processCADU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(processCADU_sptr self) -> int"""
        return _ccsds_swig.processCADU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(processCADU_sptr self, int i) -> long"""
        return _ccsds_swig.processCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(processCADU_sptr self, long max_output_buffer)
        set_max_output_buffer(processCADU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.processCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(processCADU_sptr self, int i) -> long"""
        return _ccsds_swig.processCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(processCADU_sptr self, long min_output_buffer)
        set_min_output_buffer(processCADU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.processCADU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(processCADU_sptr self, int which) -> float
        pc_input_buffers_full(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(processCADU_sptr self, int which) -> float
        pc_input_buffers_full_avg(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(processCADU_sptr self, int which) -> float
        pc_input_buffers_full_var(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(processCADU_sptr self, int which) -> float
        pc_output_buffers_full(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(processCADU_sptr self, int which) -> float
        pc_output_buffers_full_avg(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(processCADU_sptr self, int which) -> float
        pc_output_buffers_full_var(processCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.processCADU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(processCADU_sptr self) -> float"""
        return _ccsds_swig.processCADU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(processCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.processCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(processCADU_sptr self)"""
        return _ccsds_swig.processCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(processCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.processCADU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(processCADU_sptr self) -> int"""
        return _ccsds_swig.processCADU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(processCADU_sptr self) -> int"""
        return _ccsds_swig.processCADU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(processCADU_sptr self, int priority) -> int"""
        return _ccsds_swig.processCADU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(processCADU_sptr self) -> std::string"""
        return _ccsds_swig.processCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(processCADU_sptr self) -> std::string"""
        return _ccsds_swig.processCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(processCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.processCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(processCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.processCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(processCADU_sptr self) -> long"""
        return _ccsds_swig.processCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(processCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.processCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(processCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.processCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(processCADU_sptr self) -> std::string"""
        return _ccsds_swig.processCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(processCADU_sptr self, std::string name)"""
        return _ccsds_swig.processCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(processCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.processCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(processCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.processCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(processCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.processCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(processCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.processCADU_sptr_message_subscribers(self, which_port)

processCADU_sptr_swigregister = _ccsds_swig.processCADU_sptr_swigregister
processCADU_sptr_swigregister(processCADU_sptr)


processCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
processCADU = processCADU.make;

class extractCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::extractCADU.

    To avoid accidental use of raw pointers, ccsds::extractCADU's constructor is in a private implementation class. ccsds::extractCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        syncWord : 
        tolerance : 
        descramble : 
        rs : 
        intDepth : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frameLength, syncWord, tolerance, descramble, rs, intDepth):
        """
        make(int frameLength, std::string syncWord, int tolerance, int descramble, int rs, int intDepth) -> extractCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::extractCADU.

        To avoid accidental use of raw pointers, ccsds::extractCADU's constructor is in a private implementation class. ccsds::extractCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            syncWord : 
            tolerance : 
            descramble : 
            rs : 
            intDepth : 
        """
        return _ccsds_swig.extractCADU_make(frameLength, syncWord, tolerance, descramble, rs, intDepth)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_extractCADU
    __del__ = lambda self: None
extractCADU_swigregister = _ccsds_swig.extractCADU_swigregister
extractCADU_swigregister(extractCADU)

def extractCADU_make(frameLength, syncWord, tolerance, descramble, rs, intDepth):
    """
    extractCADU_make(int frameLength, std::string syncWord, int tolerance, int descramble, int rs, int intDepth) -> extractCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::extractCADU.

    To avoid accidental use of raw pointers, ccsds::extractCADU's constructor is in a private implementation class. ccsds::extractCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        syncWord : 
        tolerance : 
        descramble : 
        rs : 
        intDepth : 
    """
    return _ccsds_swig.extractCADU_make(frameLength, syncWord, tolerance, descramble, rs, intDepth)

class extractCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::extractCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::extractCADU)> self) -> extractCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::extractCADU)> self, extractCADU p) -> extractCADU_sptr
        """
        this = _ccsds_swig.new_extractCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(extractCADU_sptr self) -> extractCADU"""
        return _ccsds_swig.extractCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_extractCADU_sptr
    __del__ = lambda self: None

    def make(self, frameLength, syncWord, tolerance, descramble, rs, intDepth):
        """
        make(extractCADU_sptr self, int frameLength, std::string syncWord, int tolerance, int descramble, int rs, int intDepth) -> extractCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::extractCADU.

        To avoid accidental use of raw pointers, ccsds::extractCADU's constructor is in a private implementation class. ccsds::extractCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            syncWord : 
            tolerance : 
            descramble : 
            rs : 
            intDepth : 
        """
        return _ccsds_swig.extractCADU_sptr_make(self, frameLength, syncWord, tolerance, descramble, rs, intDepth)


    def primitive_connect(self, *args):
        """
        primitive_connect(extractCADU_sptr self, basic_block_sptr block)
        primitive_connect(extractCADU_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.extractCADU_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(extractCADU_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(extractCADU_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.extractCADU_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(extractCADU_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(extractCADU_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.extractCADU_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(extractCADU_sptr self, basic_block_sptr block)
        primitive_disconnect(extractCADU_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.extractCADU_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(extractCADU_sptr self)"""
        return _ccsds_swig.extractCADU_sptr_disconnect_all(self)


    def lock(self):
        """lock(extractCADU_sptr self)"""
        return _ccsds_swig.extractCADU_sptr_lock(self)


    def unlock(self):
        """unlock(extractCADU_sptr self)"""
        return _ccsds_swig.extractCADU_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(extractCADU_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.extractCADU_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(extractCADU_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.extractCADU_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(extractCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.extractCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(extractCADU_sptr self)"""
        return _ccsds_swig.extractCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(extractCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.extractCADU_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(extractCADU_sptr self, int i) -> size_t"""
        return _ccsds_swig.extractCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(extractCADU_sptr self, size_t max_output_buffer)
        set_max_output_buffer(extractCADU_sptr self, int port, size_t max_output_buffer)
        """
        return _ccsds_swig.extractCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(extractCADU_sptr self, int i) -> size_t"""
        return _ccsds_swig.extractCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(extractCADU_sptr self, size_t min_output_buffer)
        set_min_output_buffer(extractCADU_sptr self, int port, size_t min_output_buffer)
        """
        return _ccsds_swig.extractCADU_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(extractCADU_sptr self) -> hier_block2_sptr"""
        return _ccsds_swig.extractCADU_sptr_to_hier_block2(self)


    def name(self):
        """name(extractCADU_sptr self) -> std::string"""
        return _ccsds_swig.extractCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(extractCADU_sptr self) -> std::string"""
        return _ccsds_swig.extractCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(extractCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.extractCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(extractCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.extractCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(extractCADU_sptr self) -> long"""
        return _ccsds_swig.extractCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(extractCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.extractCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(extractCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.extractCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(extractCADU_sptr self) -> std::string"""
        return _ccsds_swig.extractCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(extractCADU_sptr self, std::string name)"""
        return _ccsds_swig.extractCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(extractCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.extractCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(extractCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.extractCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(extractCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.extractCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(extractCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.extractCADU_sptr_message_subscribers(self, which_port)

extractCADU_sptr_swigregister = _ccsds_swig.extractCADU_sptr_swigregister
extractCADU_sptr_swigregister(extractCADU_sptr)


extractCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
extractCADU = extractCADU.make;

class synchronizeCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADU.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADU's constructor is in a private implementation class. ccsds::synchronizeCADU::make is the public interface for creating new instances.

    Args:
        syncWord : 
        tolerance : 
        tagName : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(syncWord, tolerance, tagName):
        """
        make(std::string syncWord, int tolerance, std::string tagName) -> synchronizeCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADU.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADU's constructor is in a private implementation class. ccsds::synchronizeCADU::make is the public interface for creating new instances.

        Args:
            syncWord : 
            tolerance : 
            tagName : 
        """
        return _ccsds_swig.synchronizeCADU_make(syncWord, tolerance, tagName)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADU
    __del__ = lambda self: None
synchronizeCADU_swigregister = _ccsds_swig.synchronizeCADU_swigregister
synchronizeCADU_swigregister(synchronizeCADU)

def synchronizeCADU_make(syncWord, tolerance, tagName):
    """
    synchronizeCADU_make(std::string syncWord, int tolerance, std::string tagName) -> synchronizeCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADU.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADU's constructor is in a private implementation class. ccsds::synchronizeCADU::make is the public interface for creating new instances.

    Args:
        syncWord : 
        tolerance : 
        tagName : 
    """
    return _ccsds_swig.synchronizeCADU_make(syncWord, tolerance, tagName)

class synchronizeCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::synchronizeCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADU)> self) -> synchronizeCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADU)> self, synchronizeCADU p) -> synchronizeCADU_sptr
        """
        this = _ccsds_swig.new_synchronizeCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(synchronizeCADU_sptr self) -> synchronizeCADU"""
        return _ccsds_swig.synchronizeCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADU_sptr
    __del__ = lambda self: None

    def make(self, syncWord, tolerance, tagName):
        """
        make(synchronizeCADU_sptr self, std::string syncWord, int tolerance, std::string tagName) -> synchronizeCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADU.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADU's constructor is in a private implementation class. ccsds::synchronizeCADU::make is the public interface for creating new instances.

        Args:
            syncWord : 
            tolerance : 
            tagName : 
        """
        return _ccsds_swig.synchronizeCADU_sptr_make(self, syncWord, tolerance, tagName)


    def primitive_connect(self, *args):
        """
        primitive_connect(synchronizeCADU_sptr self, basic_block_sptr block)
        primitive_connect(synchronizeCADU_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.synchronizeCADU_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(synchronizeCADU_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(synchronizeCADU_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.synchronizeCADU_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(synchronizeCADU_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(synchronizeCADU_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _ccsds_swig.synchronizeCADU_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(synchronizeCADU_sptr self, basic_block_sptr block)
        primitive_disconnect(synchronizeCADU_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _ccsds_swig.synchronizeCADU_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(synchronizeCADU_sptr self)"""
        return _ccsds_swig.synchronizeCADU_sptr_disconnect_all(self)


    def lock(self):
        """lock(synchronizeCADU_sptr self)"""
        return _ccsds_swig.synchronizeCADU_sptr_lock(self)


    def unlock(self):
        """unlock(synchronizeCADU_sptr self)"""
        return _ccsds_swig.synchronizeCADU_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(synchronizeCADU_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.synchronizeCADU_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(synchronizeCADU_sptr self, swig_int_ptr port_id)"""
        return _ccsds_swig.synchronizeCADU_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(synchronizeCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.synchronizeCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(synchronizeCADU_sptr self)"""
        return _ccsds_swig.synchronizeCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(synchronizeCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.synchronizeCADU_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(synchronizeCADU_sptr self, int i) -> size_t"""
        return _ccsds_swig.synchronizeCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synchronizeCADU_sptr self, size_t max_output_buffer)
        set_max_output_buffer(synchronizeCADU_sptr self, int port, size_t max_output_buffer)
        """
        return _ccsds_swig.synchronizeCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(synchronizeCADU_sptr self, int i) -> size_t"""
        return _ccsds_swig.synchronizeCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synchronizeCADU_sptr self, size_t min_output_buffer)
        set_min_output_buffer(synchronizeCADU_sptr self, int port, size_t min_output_buffer)
        """
        return _ccsds_swig.synchronizeCADU_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(synchronizeCADU_sptr self) -> hier_block2_sptr"""
        return _ccsds_swig.synchronizeCADU_sptr_to_hier_block2(self)


    def name(self):
        """name(synchronizeCADU_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(synchronizeCADU_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(synchronizeCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(synchronizeCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(synchronizeCADU_sptr self) -> long"""
        return _ccsds_swig.synchronizeCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(synchronizeCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.synchronizeCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(synchronizeCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.synchronizeCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(synchronizeCADU_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(synchronizeCADU_sptr self, std::string name)"""
        return _ccsds_swig.synchronizeCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(synchronizeCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.synchronizeCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(synchronizeCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(synchronizeCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(synchronizeCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADU_sptr_message_subscribers(self, which_port)

synchronizeCADU_sptr_swigregister = _ccsds_swig.synchronizeCADU_sptr_swigregister
synchronizeCADU_sptr_swigregister(synchronizeCADU_sptr)


synchronizeCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synchronizeCADU = synchronizeCADU.make;

class generateCLTU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::generateCLTU.

    To avoid accidental use of raw pointers, ccsds::generateCLTU's constructor is in a private implementation class. ccsds::generateCLTU::make is the public interface for creating new instances.

    Args:
        scramble : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(scramble):
        """
        make(int scramble) -> generateCLTU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::generateCLTU.

        To avoid accidental use of raw pointers, ccsds::generateCLTU's constructor is in a private implementation class. ccsds::generateCLTU::make is the public interface for creating new instances.

        Args:
            scramble : 
        """
        return _ccsds_swig.generateCLTU_make(scramble)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_generateCLTU
    __del__ = lambda self: None
generateCLTU_swigregister = _ccsds_swig.generateCLTU_swigregister
generateCLTU_swigregister(generateCLTU)

def generateCLTU_make(scramble):
    """
    generateCLTU_make(int scramble) -> generateCLTU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::generateCLTU.

    To avoid accidental use of raw pointers, ccsds::generateCLTU's constructor is in a private implementation class. ccsds::generateCLTU::make is the public interface for creating new instances.

    Args:
        scramble : 
    """
    return _ccsds_swig.generateCLTU_make(scramble)

class generateCLTU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::generateCLTU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::generateCLTU)> self) -> generateCLTU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::generateCLTU)> self, generateCLTU p) -> generateCLTU_sptr
        """
        this = _ccsds_swig.new_generateCLTU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(generateCLTU_sptr self) -> generateCLTU"""
        return _ccsds_swig.generateCLTU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_generateCLTU_sptr
    __del__ = lambda self: None

    def make(self, scramble):
        """
        make(generateCLTU_sptr self, int scramble) -> generateCLTU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::generateCLTU.

        To avoid accidental use of raw pointers, ccsds::generateCLTU's constructor is in a private implementation class. ccsds::generateCLTU::make is the public interface for creating new instances.

        Args:
            scramble : 
        """
        return _ccsds_swig.generateCLTU_sptr_make(self, scramble)


    def history(self):
        """history(generateCLTU_sptr self) -> unsigned int"""
        return _ccsds_swig.generateCLTU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(generateCLTU_sptr self, int which, int delay)
        declare_sample_delay(generateCLTU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.generateCLTU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(generateCLTU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.generateCLTU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(generateCLTU_sptr self) -> int"""
        return _ccsds_swig.generateCLTU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(generateCLTU_sptr self) -> double"""
        return _ccsds_swig.generateCLTU_sptr_relative_rate(self)


    def start(self):
        """start(generateCLTU_sptr self) -> bool"""
        return _ccsds_swig.generateCLTU_sptr_start(self)


    def stop(self):
        """stop(generateCLTU_sptr self) -> bool"""
        return _ccsds_swig.generateCLTU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(generateCLTU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.generateCLTU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(generateCLTU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.generateCLTU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(generateCLTU_sptr self) -> int"""
        return _ccsds_swig.generateCLTU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(generateCLTU_sptr self, int m)"""
        return _ccsds_swig.generateCLTU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(generateCLTU_sptr self)"""
        return _ccsds_swig.generateCLTU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(generateCLTU_sptr self) -> bool"""
        return _ccsds_swig.generateCLTU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(generateCLTU_sptr self, int m)"""
        return _ccsds_swig.generateCLTU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(generateCLTU_sptr self) -> int"""
        return _ccsds_swig.generateCLTU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(generateCLTU_sptr self, int i) -> long"""
        return _ccsds_swig.generateCLTU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(generateCLTU_sptr self, long max_output_buffer)
        set_max_output_buffer(generateCLTU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.generateCLTU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(generateCLTU_sptr self, int i) -> long"""
        return _ccsds_swig.generateCLTU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(generateCLTU_sptr self, long min_output_buffer)
        set_min_output_buffer(generateCLTU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.generateCLTU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(generateCLTU_sptr self, int which) -> float
        pc_input_buffers_full(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(generateCLTU_sptr self, int which) -> float
        pc_input_buffers_full_avg(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(generateCLTU_sptr self, int which) -> float
        pc_input_buffers_full_var(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(generateCLTU_sptr self, int which) -> float
        pc_output_buffers_full(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(generateCLTU_sptr self, int which) -> float
        pc_output_buffers_full_avg(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(generateCLTU_sptr self, int which) -> float
        pc_output_buffers_full_var(generateCLTU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.generateCLTU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(generateCLTU_sptr self) -> float"""
        return _ccsds_swig.generateCLTU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(generateCLTU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.generateCLTU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(generateCLTU_sptr self)"""
        return _ccsds_swig.generateCLTU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(generateCLTU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.generateCLTU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(generateCLTU_sptr self) -> int"""
        return _ccsds_swig.generateCLTU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(generateCLTU_sptr self) -> int"""
        return _ccsds_swig.generateCLTU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(generateCLTU_sptr self, int priority) -> int"""
        return _ccsds_swig.generateCLTU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(generateCLTU_sptr self) -> std::string"""
        return _ccsds_swig.generateCLTU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(generateCLTU_sptr self) -> std::string"""
        return _ccsds_swig.generateCLTU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(generateCLTU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.generateCLTU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(generateCLTU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.generateCLTU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(generateCLTU_sptr self) -> long"""
        return _ccsds_swig.generateCLTU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(generateCLTU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.generateCLTU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(generateCLTU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.generateCLTU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(generateCLTU_sptr self) -> std::string"""
        return _ccsds_swig.generateCLTU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(generateCLTU_sptr self, std::string name)"""
        return _ccsds_swig.generateCLTU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(generateCLTU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.generateCLTU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(generateCLTU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.generateCLTU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(generateCLTU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.generateCLTU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(generateCLTU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.generateCLTU_sptr_message_subscribers(self, which_port)

generateCLTU_sptr_swigregister = _ccsds_swig.generateCLTU_sptr_swigregister
generateCLTU_sptr_swigregister(generateCLTU_sptr)


generateCLTU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
generateCLTU = generateCLTU.make;

class genCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::genCADU.

    To avoid accidental use of raw pointers, ccsds::genCADU's constructor is in a private implementation class. ccsds::genCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        sync : 
        scramble : 
        rs : 
        intDepth : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frameLength, sync, scramble, rs, intDepth, len_tag_key):
        """
        make(int frameLength, std::string sync, int scramble, int rs, int intDepth, std::string len_tag_key) -> genCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::genCADU.

        To avoid accidental use of raw pointers, ccsds::genCADU's constructor is in a private implementation class. ccsds::genCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            sync : 
            scramble : 
            rs : 
            intDepth : 
            len_tag_key : 
        """
        return _ccsds_swig.genCADU_make(frameLength, sync, scramble, rs, intDepth, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_genCADU
    __del__ = lambda self: None
genCADU_swigregister = _ccsds_swig.genCADU_swigregister
genCADU_swigregister(genCADU)

def genCADU_make(frameLength, sync, scramble, rs, intDepth, len_tag_key):
    """
    genCADU_make(int frameLength, std::string sync, int scramble, int rs, int intDepth, std::string len_tag_key) -> genCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::genCADU.

    To avoid accidental use of raw pointers, ccsds::genCADU's constructor is in a private implementation class. ccsds::genCADU::make is the public interface for creating new instances.

    Args:
        frameLength : 
        sync : 
        scramble : 
        rs : 
        intDepth : 
        len_tag_key : 
    """
    return _ccsds_swig.genCADU_make(frameLength, sync, scramble, rs, intDepth, len_tag_key)

class genCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::genCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::genCADU)> self) -> genCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::genCADU)> self, genCADU p) -> genCADU_sptr
        """
        this = _ccsds_swig.new_genCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(genCADU_sptr self) -> genCADU"""
        return _ccsds_swig.genCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_genCADU_sptr
    __del__ = lambda self: None

    def make(self, frameLength, sync, scramble, rs, intDepth, len_tag_key):
        """
        make(genCADU_sptr self, int frameLength, std::string sync, int scramble, int rs, int intDepth, std::string len_tag_key) -> genCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::genCADU.

        To avoid accidental use of raw pointers, ccsds::genCADU's constructor is in a private implementation class. ccsds::genCADU::make is the public interface for creating new instances.

        Args:
            frameLength : 
            sync : 
            scramble : 
            rs : 
            intDepth : 
            len_tag_key : 
        """
        return _ccsds_swig.genCADU_sptr_make(self, frameLength, sync, scramble, rs, intDepth, len_tag_key)


    def history(self):
        """history(genCADU_sptr self) -> unsigned int"""
        return _ccsds_swig.genCADU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(genCADU_sptr self, int which, int delay)
        declare_sample_delay(genCADU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.genCADU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(genCADU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.genCADU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(genCADU_sptr self) -> int"""
        return _ccsds_swig.genCADU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(genCADU_sptr self) -> double"""
        return _ccsds_swig.genCADU_sptr_relative_rate(self)


    def start(self):
        """start(genCADU_sptr self) -> bool"""
        return _ccsds_swig.genCADU_sptr_start(self)


    def stop(self):
        """stop(genCADU_sptr self) -> bool"""
        return _ccsds_swig.genCADU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(genCADU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.genCADU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(genCADU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.genCADU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(genCADU_sptr self) -> int"""
        return _ccsds_swig.genCADU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(genCADU_sptr self, int m)"""
        return _ccsds_swig.genCADU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(genCADU_sptr self)"""
        return _ccsds_swig.genCADU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(genCADU_sptr self) -> bool"""
        return _ccsds_swig.genCADU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(genCADU_sptr self, int m)"""
        return _ccsds_swig.genCADU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(genCADU_sptr self) -> int"""
        return _ccsds_swig.genCADU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(genCADU_sptr self, int i) -> long"""
        return _ccsds_swig.genCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(genCADU_sptr self, long max_output_buffer)
        set_max_output_buffer(genCADU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.genCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(genCADU_sptr self, int i) -> long"""
        return _ccsds_swig.genCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(genCADU_sptr self, long min_output_buffer)
        set_min_output_buffer(genCADU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.genCADU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(genCADU_sptr self, int which) -> float
        pc_input_buffers_full(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(genCADU_sptr self, int which) -> float
        pc_input_buffers_full_avg(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(genCADU_sptr self, int which) -> float
        pc_input_buffers_full_var(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(genCADU_sptr self, int which) -> float
        pc_output_buffers_full(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(genCADU_sptr self, int which) -> float
        pc_output_buffers_full_avg(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(genCADU_sptr self, int which) -> float
        pc_output_buffers_full_var(genCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.genCADU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(genCADU_sptr self) -> float"""
        return _ccsds_swig.genCADU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(genCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.genCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(genCADU_sptr self)"""
        return _ccsds_swig.genCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(genCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.genCADU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(genCADU_sptr self) -> int"""
        return _ccsds_swig.genCADU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(genCADU_sptr self) -> int"""
        return _ccsds_swig.genCADU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(genCADU_sptr self, int priority) -> int"""
        return _ccsds_swig.genCADU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(genCADU_sptr self) -> std::string"""
        return _ccsds_swig.genCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(genCADU_sptr self) -> std::string"""
        return _ccsds_swig.genCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(genCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.genCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(genCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.genCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(genCADU_sptr self) -> long"""
        return _ccsds_swig.genCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(genCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.genCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(genCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.genCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(genCADU_sptr self) -> std::string"""
        return _ccsds_swig.genCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(genCADU_sptr self, std::string name)"""
        return _ccsds_swig.genCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(genCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.genCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(genCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.genCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(genCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.genCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(genCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.genCADU_sptr_message_subscribers(self, which_port)

genCADU_sptr_swigregister = _ccsds_swig.genCADU_sptr_swigregister
genCADU_sptr_swigregister(genCADU_sptr)


genCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
genCADU = genCADU.make;

class simplifiedPLOP1(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::simplifiedPLOP1.

    To avoid accidental use of raw pointers, ccsds::simplifiedPLOP1's constructor is in a private implementation class. ccsds::simplifiedPLOP1::make is the public interface for creating new instances.

    Args:
        idleSeqLen : 
        acqSeqLen : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(idleSeqLen, acqSeqLen):
        """
        make(int idleSeqLen, int acqSeqLen) -> simplifiedPLOP1_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::simplifiedPLOP1.

        To avoid accidental use of raw pointers, ccsds::simplifiedPLOP1's constructor is in a private implementation class. ccsds::simplifiedPLOP1::make is the public interface for creating new instances.

        Args:
            idleSeqLen : 
            acqSeqLen : 
        """
        return _ccsds_swig.simplifiedPLOP1_make(idleSeqLen, acqSeqLen)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_simplifiedPLOP1
    __del__ = lambda self: None
simplifiedPLOP1_swigregister = _ccsds_swig.simplifiedPLOP1_swigregister
simplifiedPLOP1_swigregister(simplifiedPLOP1)

def simplifiedPLOP1_make(idleSeqLen, acqSeqLen):
    """
    simplifiedPLOP1_make(int idleSeqLen, int acqSeqLen) -> simplifiedPLOP1_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::simplifiedPLOP1.

    To avoid accidental use of raw pointers, ccsds::simplifiedPLOP1's constructor is in a private implementation class. ccsds::simplifiedPLOP1::make is the public interface for creating new instances.

    Args:
        idleSeqLen : 
        acqSeqLen : 
    """
    return _ccsds_swig.simplifiedPLOP1_make(idleSeqLen, acqSeqLen)

class simplifiedPLOP1_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::simplifiedPLOP1)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::simplifiedPLOP1)> self) -> simplifiedPLOP1_sptr
        __init__(boost::shared_ptr<(gr::ccsds::simplifiedPLOP1)> self, simplifiedPLOP1 p) -> simplifiedPLOP1_sptr
        """
        this = _ccsds_swig.new_simplifiedPLOP1_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(simplifiedPLOP1_sptr self) -> simplifiedPLOP1"""
        return _ccsds_swig.simplifiedPLOP1_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_simplifiedPLOP1_sptr
    __del__ = lambda self: None

    def make(self, idleSeqLen, acqSeqLen):
        """
        make(simplifiedPLOP1_sptr self, int idleSeqLen, int acqSeqLen) -> simplifiedPLOP1_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::simplifiedPLOP1.

        To avoid accidental use of raw pointers, ccsds::simplifiedPLOP1's constructor is in a private implementation class. ccsds::simplifiedPLOP1::make is the public interface for creating new instances.

        Args:
            idleSeqLen : 
            acqSeqLen : 
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_make(self, idleSeqLen, acqSeqLen)


    def history(self):
        """history(simplifiedPLOP1_sptr self) -> unsigned int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(simplifiedPLOP1_sptr self, int which, int delay)
        declare_sample_delay(simplifiedPLOP1_sptr self, unsigned int delay)
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(simplifiedPLOP1_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(simplifiedPLOP1_sptr self) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(simplifiedPLOP1_sptr self) -> double"""
        return _ccsds_swig.simplifiedPLOP1_sptr_relative_rate(self)


    def start(self):
        """start(simplifiedPLOP1_sptr self) -> bool"""
        return _ccsds_swig.simplifiedPLOP1_sptr_start(self)


    def stop(self):
        """stop(simplifiedPLOP1_sptr self) -> bool"""
        return _ccsds_swig.simplifiedPLOP1_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(simplifiedPLOP1_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.simplifiedPLOP1_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(simplifiedPLOP1_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.simplifiedPLOP1_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(simplifiedPLOP1_sptr self) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(simplifiedPLOP1_sptr self, int m)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(simplifiedPLOP1_sptr self)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(simplifiedPLOP1_sptr self) -> bool"""
        return _ccsds_swig.simplifiedPLOP1_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(simplifiedPLOP1_sptr self, int m)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(simplifiedPLOP1_sptr self) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(simplifiedPLOP1_sptr self, int i) -> long"""
        return _ccsds_swig.simplifiedPLOP1_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(simplifiedPLOP1_sptr self, long max_output_buffer)
        set_max_output_buffer(simplifiedPLOP1_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(simplifiedPLOP1_sptr self, int i) -> long"""
        return _ccsds_swig.simplifiedPLOP1_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(simplifiedPLOP1_sptr self, long min_output_buffer)
        set_min_output_buffer(simplifiedPLOP1_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(simplifiedPLOP1_sptr self, int which) -> float
        pc_input_buffers_full(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(simplifiedPLOP1_sptr self, int which) -> float
        pc_input_buffers_full_avg(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(simplifiedPLOP1_sptr self, int which) -> float
        pc_input_buffers_full_var(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(simplifiedPLOP1_sptr self, int which) -> float
        pc_output_buffers_full(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(simplifiedPLOP1_sptr self, int which) -> float
        pc_output_buffers_full_avg(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(simplifiedPLOP1_sptr self, int which) -> float
        pc_output_buffers_full_var(simplifiedPLOP1_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(simplifiedPLOP1_sptr self) -> float"""
        return _ccsds_swig.simplifiedPLOP1_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(simplifiedPLOP1_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(simplifiedPLOP1_sptr self)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(simplifiedPLOP1_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.simplifiedPLOP1_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(simplifiedPLOP1_sptr self) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(simplifiedPLOP1_sptr self) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(simplifiedPLOP1_sptr self, int priority) -> int"""
        return _ccsds_swig.simplifiedPLOP1_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(simplifiedPLOP1_sptr self) -> std::string"""
        return _ccsds_swig.simplifiedPLOP1_sptr_name(self)


    def symbol_name(self):
        """symbol_name(simplifiedPLOP1_sptr self) -> std::string"""
        return _ccsds_swig.simplifiedPLOP1_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(simplifiedPLOP1_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(simplifiedPLOP1_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(simplifiedPLOP1_sptr self) -> long"""
        return _ccsds_swig.simplifiedPLOP1_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(simplifiedPLOP1_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(simplifiedPLOP1_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.simplifiedPLOP1_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(simplifiedPLOP1_sptr self) -> std::string"""
        return _ccsds_swig.simplifiedPLOP1_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(simplifiedPLOP1_sptr self, std::string name)"""
        return _ccsds_swig.simplifiedPLOP1_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(simplifiedPLOP1_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.simplifiedPLOP1_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(simplifiedPLOP1_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(simplifiedPLOP1_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(simplifiedPLOP1_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.simplifiedPLOP1_sptr_message_subscribers(self, which_port)

simplifiedPLOP1_sptr_swigregister = _ccsds_swig.simplifiedPLOP1_sptr_swigregister
simplifiedPLOP1_sptr_swigregister(simplifiedPLOP1_sptr)


simplifiedPLOP1_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
simplifiedPLOP1 = simplifiedPLOP1.make;

class cc_depuncture(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::cc_depuncture.

    To avoid accidental use of raw pointers, ccsds::cc_depuncture's constructor is in a private implementation class. ccsds::cc_depuncture::make is the public interface for creating new instances.

    Args:
        puncsize : 
        puncpat : 
        delay : 
        symbol : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(puncsize, puncpat, delay, symbol):
        """
        make(int puncsize, int puncpat, int delay, char symbol) -> cc_depuncture_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::cc_depuncture.

        To avoid accidental use of raw pointers, ccsds::cc_depuncture's constructor is in a private implementation class. ccsds::cc_depuncture::make is the public interface for creating new instances.

        Args:
            puncsize : 
            puncpat : 
            delay : 
            symbol : 
        """
        return _ccsds_swig.cc_depuncture_make(puncsize, puncpat, delay, symbol)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_cc_depuncture
    __del__ = lambda self: None
cc_depuncture_swigregister = _ccsds_swig.cc_depuncture_swigregister
cc_depuncture_swigregister(cc_depuncture)

def cc_depuncture_make(puncsize, puncpat, delay, symbol):
    """
    cc_depuncture_make(int puncsize, int puncpat, int delay, char symbol) -> cc_depuncture_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::cc_depuncture.

    To avoid accidental use of raw pointers, ccsds::cc_depuncture's constructor is in a private implementation class. ccsds::cc_depuncture::make is the public interface for creating new instances.

    Args:
        puncsize : 
        puncpat : 
        delay : 
        symbol : 
    """
    return _ccsds_swig.cc_depuncture_make(puncsize, puncpat, delay, symbol)

class cc_depuncture_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::cc_depuncture)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::cc_depuncture)> self) -> cc_depuncture_sptr
        __init__(boost::shared_ptr<(gr::ccsds::cc_depuncture)> self, cc_depuncture p) -> cc_depuncture_sptr
        """
        this = _ccsds_swig.new_cc_depuncture_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(cc_depuncture_sptr self) -> cc_depuncture"""
        return _ccsds_swig.cc_depuncture_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_cc_depuncture_sptr
    __del__ = lambda self: None

    def make(self, puncsize, puncpat, delay, symbol):
        """
        make(cc_depuncture_sptr self, int puncsize, int puncpat, int delay, char symbol) -> cc_depuncture_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::cc_depuncture.

        To avoid accidental use of raw pointers, ccsds::cc_depuncture's constructor is in a private implementation class. ccsds::cc_depuncture::make is the public interface for creating new instances.

        Args:
            puncsize : 
            puncpat : 
            delay : 
            symbol : 
        """
        return _ccsds_swig.cc_depuncture_sptr_make(self, puncsize, puncpat, delay, symbol)


    def history(self):
        """history(cc_depuncture_sptr self) -> unsigned int"""
        return _ccsds_swig.cc_depuncture_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cc_depuncture_sptr self, int which, int delay)
        declare_sample_delay(cc_depuncture_sptr self, unsigned int delay)
        """
        return _ccsds_swig.cc_depuncture_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(cc_depuncture_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.cc_depuncture_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(cc_depuncture_sptr self) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(cc_depuncture_sptr self) -> double"""
        return _ccsds_swig.cc_depuncture_sptr_relative_rate(self)


    def start(self):
        """start(cc_depuncture_sptr self) -> bool"""
        return _ccsds_swig.cc_depuncture_sptr_start(self)


    def stop(self):
        """stop(cc_depuncture_sptr self) -> bool"""
        return _ccsds_swig.cc_depuncture_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(cc_depuncture_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.cc_depuncture_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(cc_depuncture_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.cc_depuncture_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(cc_depuncture_sptr self) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(cc_depuncture_sptr self, int m)"""
        return _ccsds_swig.cc_depuncture_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cc_depuncture_sptr self)"""
        return _ccsds_swig.cc_depuncture_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cc_depuncture_sptr self) -> bool"""
        return _ccsds_swig.cc_depuncture_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(cc_depuncture_sptr self, int m)"""
        return _ccsds_swig.cc_depuncture_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(cc_depuncture_sptr self) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(cc_depuncture_sptr self, int i) -> long"""
        return _ccsds_swig.cc_depuncture_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cc_depuncture_sptr self, long max_output_buffer)
        set_max_output_buffer(cc_depuncture_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.cc_depuncture_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(cc_depuncture_sptr self, int i) -> long"""
        return _ccsds_swig.cc_depuncture_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cc_depuncture_sptr self, long min_output_buffer)
        set_min_output_buffer(cc_depuncture_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.cc_depuncture_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cc_depuncture_sptr self, int which) -> float
        pc_input_buffers_full(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cc_depuncture_sptr self, int which) -> float
        pc_input_buffers_full_avg(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cc_depuncture_sptr self, int which) -> float
        pc_input_buffers_full_var(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cc_depuncture_sptr self, int which) -> float
        pc_output_buffers_full(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cc_depuncture_sptr self, int which) -> float
        pc_output_buffers_full_avg(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cc_depuncture_sptr self, int which) -> float
        pc_output_buffers_full_var(cc_depuncture_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.cc_depuncture_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(cc_depuncture_sptr self) -> float"""
        return _ccsds_swig.cc_depuncture_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(cc_depuncture_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.cc_depuncture_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(cc_depuncture_sptr self)"""
        return _ccsds_swig.cc_depuncture_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(cc_depuncture_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.cc_depuncture_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(cc_depuncture_sptr self) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(cc_depuncture_sptr self) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(cc_depuncture_sptr self, int priority) -> int"""
        return _ccsds_swig.cc_depuncture_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(cc_depuncture_sptr self) -> std::string"""
        return _ccsds_swig.cc_depuncture_sptr_name(self)


    def symbol_name(self):
        """symbol_name(cc_depuncture_sptr self) -> std::string"""
        return _ccsds_swig.cc_depuncture_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(cc_depuncture_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.cc_depuncture_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(cc_depuncture_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.cc_depuncture_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(cc_depuncture_sptr self) -> long"""
        return _ccsds_swig.cc_depuncture_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(cc_depuncture_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.cc_depuncture_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(cc_depuncture_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.cc_depuncture_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(cc_depuncture_sptr self) -> std::string"""
        return _ccsds_swig.cc_depuncture_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(cc_depuncture_sptr self, std::string name)"""
        return _ccsds_swig.cc_depuncture_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(cc_depuncture_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.cc_depuncture_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(cc_depuncture_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.cc_depuncture_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(cc_depuncture_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.cc_depuncture_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(cc_depuncture_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.cc_depuncture_sptr_message_subscribers(self, which_port)

cc_depuncture_sptr_swigregister = _ccsds_swig.cc_depuncture_sptr_swigregister
cc_depuncture_sptr_swigregister(cc_depuncture_sptr)


cc_depuncture_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cc_depuncture = cc_depuncture.make;

class createCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::createCADU.

    To avoid accidental use of raw pointers, ccsds::createCADU's constructor is in a private implementation class. ccsds::createCADU::make is the public interface for creating new instances.

    Args:
        frame_length : 
        sync : 
        scramble : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_length, sync, scramble, len_tag_key):
        """
        make(int frame_length, std::string sync, int scramble, std::string len_tag_key) -> createCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::createCADU.

        To avoid accidental use of raw pointers, ccsds::createCADU's constructor is in a private implementation class. ccsds::createCADU::make is the public interface for creating new instances.

        Args:
            frame_length : 
            sync : 
            scramble : 
            len_tag_key : 
        """
        return _ccsds_swig.createCADU_make(frame_length, sync, scramble, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_createCADU
    __del__ = lambda self: None
createCADU_swigregister = _ccsds_swig.createCADU_swigregister
createCADU_swigregister(createCADU)

def createCADU_make(frame_length, sync, scramble, len_tag_key):
    """
    createCADU_make(int frame_length, std::string sync, int scramble, std::string len_tag_key) -> createCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::createCADU.

    To avoid accidental use of raw pointers, ccsds::createCADU's constructor is in a private implementation class. ccsds::createCADU::make is the public interface for creating new instances.

    Args:
        frame_length : 
        sync : 
        scramble : 
        len_tag_key : 
    """
    return _ccsds_swig.createCADU_make(frame_length, sync, scramble, len_tag_key)

class createCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::createCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::createCADU)> self) -> createCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::createCADU)> self, createCADU p) -> createCADU_sptr
        """
        this = _ccsds_swig.new_createCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(createCADU_sptr self) -> createCADU"""
        return _ccsds_swig.createCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_createCADU_sptr
    __del__ = lambda self: None

    def make(self, frame_length, sync, scramble, len_tag_key):
        """
        make(createCADU_sptr self, int frame_length, std::string sync, int scramble, std::string len_tag_key) -> createCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::createCADU.

        To avoid accidental use of raw pointers, ccsds::createCADU's constructor is in a private implementation class. ccsds::createCADU::make is the public interface for creating new instances.

        Args:
            frame_length : 
            sync : 
            scramble : 
            len_tag_key : 
        """
        return _ccsds_swig.createCADU_sptr_make(self, frame_length, sync, scramble, len_tag_key)


    def history(self):
        """history(createCADU_sptr self) -> unsigned int"""
        return _ccsds_swig.createCADU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(createCADU_sptr self, int which, int delay)
        declare_sample_delay(createCADU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.createCADU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(createCADU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.createCADU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(createCADU_sptr self) -> int"""
        return _ccsds_swig.createCADU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(createCADU_sptr self) -> double"""
        return _ccsds_swig.createCADU_sptr_relative_rate(self)


    def start(self):
        """start(createCADU_sptr self) -> bool"""
        return _ccsds_swig.createCADU_sptr_start(self)


    def stop(self):
        """stop(createCADU_sptr self) -> bool"""
        return _ccsds_swig.createCADU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(createCADU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.createCADU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(createCADU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.createCADU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(createCADU_sptr self) -> int"""
        return _ccsds_swig.createCADU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(createCADU_sptr self, int m)"""
        return _ccsds_swig.createCADU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(createCADU_sptr self)"""
        return _ccsds_swig.createCADU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(createCADU_sptr self) -> bool"""
        return _ccsds_swig.createCADU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(createCADU_sptr self, int m)"""
        return _ccsds_swig.createCADU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(createCADU_sptr self) -> int"""
        return _ccsds_swig.createCADU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(createCADU_sptr self, int i) -> long"""
        return _ccsds_swig.createCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(createCADU_sptr self, long max_output_buffer)
        set_max_output_buffer(createCADU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.createCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(createCADU_sptr self, int i) -> long"""
        return _ccsds_swig.createCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(createCADU_sptr self, long min_output_buffer)
        set_min_output_buffer(createCADU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.createCADU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(createCADU_sptr self, int which) -> float
        pc_input_buffers_full(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(createCADU_sptr self, int which) -> float
        pc_input_buffers_full_avg(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(createCADU_sptr self, int which) -> float
        pc_input_buffers_full_var(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(createCADU_sptr self, int which) -> float
        pc_output_buffers_full(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(createCADU_sptr self, int which) -> float
        pc_output_buffers_full_avg(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(createCADU_sptr self, int which) -> float
        pc_output_buffers_full_var(createCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.createCADU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(createCADU_sptr self) -> float"""
        return _ccsds_swig.createCADU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(createCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.createCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(createCADU_sptr self)"""
        return _ccsds_swig.createCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(createCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.createCADU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(createCADU_sptr self) -> int"""
        return _ccsds_swig.createCADU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(createCADU_sptr self) -> int"""
        return _ccsds_swig.createCADU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(createCADU_sptr self, int priority) -> int"""
        return _ccsds_swig.createCADU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(createCADU_sptr self) -> std::string"""
        return _ccsds_swig.createCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(createCADU_sptr self) -> std::string"""
        return _ccsds_swig.createCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(createCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.createCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(createCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.createCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(createCADU_sptr self) -> long"""
        return _ccsds_swig.createCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(createCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.createCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(createCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.createCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(createCADU_sptr self) -> std::string"""
        return _ccsds_swig.createCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(createCADU_sptr self, std::string name)"""
        return _ccsds_swig.createCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(createCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.createCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(createCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.createCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(createCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.createCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(createCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.createCADU_sptr_message_subscribers(self, which_port)

createCADU_sptr_swigregister = _ccsds_swig.createCADU_sptr_swigregister
createCADU_sptr_swigregister(createCADU_sptr)


createCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
createCADU = createCADU.make;

class recoverCADU(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::recoverCADU.

    To avoid accidental use of raw pointers, ccsds::recoverCADU's constructor is in a private implementation class. ccsds::recoverCADU::make is the public interface for creating new instances.

    Args:
        frame_length : 
        scramble : 
        tag_name : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_length, scramble, tag_name):
        """
        make(int frame_length, int scramble, std::string tag_name) -> recoverCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::recoverCADU.

        To avoid accidental use of raw pointers, ccsds::recoverCADU's constructor is in a private implementation class. ccsds::recoverCADU::make is the public interface for creating new instances.

        Args:
            frame_length : 
            scramble : 
            tag_name : 
        """
        return _ccsds_swig.recoverCADU_make(frame_length, scramble, tag_name)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_recoverCADU
    __del__ = lambda self: None
recoverCADU_swigregister = _ccsds_swig.recoverCADU_swigregister
recoverCADU_swigregister(recoverCADU)

def recoverCADU_make(frame_length, scramble, tag_name):
    """
    recoverCADU_make(int frame_length, int scramble, std::string tag_name) -> recoverCADU_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::recoverCADU.

    To avoid accidental use of raw pointers, ccsds::recoverCADU's constructor is in a private implementation class. ccsds::recoverCADU::make is the public interface for creating new instances.

    Args:
        frame_length : 
        scramble : 
        tag_name : 
    """
    return _ccsds_swig.recoverCADU_make(frame_length, scramble, tag_name)

class recoverCADU_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::recoverCADU)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::recoverCADU)> self) -> recoverCADU_sptr
        __init__(boost::shared_ptr<(gr::ccsds::recoverCADU)> self, recoverCADU p) -> recoverCADU_sptr
        """
        this = _ccsds_swig.new_recoverCADU_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(recoverCADU_sptr self) -> recoverCADU"""
        return _ccsds_swig.recoverCADU_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_recoverCADU_sptr
    __del__ = lambda self: None

    def make(self, frame_length, scramble, tag_name):
        """
        make(recoverCADU_sptr self, int frame_length, int scramble, std::string tag_name) -> recoverCADU_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::recoverCADU.

        To avoid accidental use of raw pointers, ccsds::recoverCADU's constructor is in a private implementation class. ccsds::recoverCADU::make is the public interface for creating new instances.

        Args:
            frame_length : 
            scramble : 
            tag_name : 
        """
        return _ccsds_swig.recoverCADU_sptr_make(self, frame_length, scramble, tag_name)


    def history(self):
        """history(recoverCADU_sptr self) -> unsigned int"""
        return _ccsds_swig.recoverCADU_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(recoverCADU_sptr self, int which, int delay)
        declare_sample_delay(recoverCADU_sptr self, unsigned int delay)
        """
        return _ccsds_swig.recoverCADU_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(recoverCADU_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.recoverCADU_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(recoverCADU_sptr self) -> int"""
        return _ccsds_swig.recoverCADU_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(recoverCADU_sptr self) -> double"""
        return _ccsds_swig.recoverCADU_sptr_relative_rate(self)


    def start(self):
        """start(recoverCADU_sptr self) -> bool"""
        return _ccsds_swig.recoverCADU_sptr_start(self)


    def stop(self):
        """stop(recoverCADU_sptr self) -> bool"""
        return _ccsds_swig.recoverCADU_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(recoverCADU_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.recoverCADU_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(recoverCADU_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.recoverCADU_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(recoverCADU_sptr self) -> int"""
        return _ccsds_swig.recoverCADU_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(recoverCADU_sptr self, int m)"""
        return _ccsds_swig.recoverCADU_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(recoverCADU_sptr self)"""
        return _ccsds_swig.recoverCADU_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(recoverCADU_sptr self) -> bool"""
        return _ccsds_swig.recoverCADU_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(recoverCADU_sptr self, int m)"""
        return _ccsds_swig.recoverCADU_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(recoverCADU_sptr self) -> int"""
        return _ccsds_swig.recoverCADU_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(recoverCADU_sptr self, int i) -> long"""
        return _ccsds_swig.recoverCADU_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(recoverCADU_sptr self, long max_output_buffer)
        set_max_output_buffer(recoverCADU_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.recoverCADU_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(recoverCADU_sptr self, int i) -> long"""
        return _ccsds_swig.recoverCADU_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(recoverCADU_sptr self, long min_output_buffer)
        set_min_output_buffer(recoverCADU_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.recoverCADU_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(recoverCADU_sptr self, int which) -> float
        pc_input_buffers_full(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(recoverCADU_sptr self, int which) -> float
        pc_input_buffers_full_avg(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(recoverCADU_sptr self, int which) -> float
        pc_input_buffers_full_var(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(recoverCADU_sptr self, int which) -> float
        pc_output_buffers_full(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(recoverCADU_sptr self, int which) -> float
        pc_output_buffers_full_avg(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(recoverCADU_sptr self, int which) -> float
        pc_output_buffers_full_var(recoverCADU_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADU_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(recoverCADU_sptr self) -> float"""
        return _ccsds_swig.recoverCADU_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(recoverCADU_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.recoverCADU_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(recoverCADU_sptr self)"""
        return _ccsds_swig.recoverCADU_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(recoverCADU_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.recoverCADU_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(recoverCADU_sptr self) -> int"""
        return _ccsds_swig.recoverCADU_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(recoverCADU_sptr self) -> int"""
        return _ccsds_swig.recoverCADU_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(recoverCADU_sptr self, int priority) -> int"""
        return _ccsds_swig.recoverCADU_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(recoverCADU_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADU_sptr_name(self)


    def symbol_name(self):
        """symbol_name(recoverCADU_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADU_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(recoverCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.recoverCADU_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(recoverCADU_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.recoverCADU_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(recoverCADU_sptr self) -> long"""
        return _ccsds_swig.recoverCADU_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(recoverCADU_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.recoverCADU_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(recoverCADU_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.recoverCADU_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(recoverCADU_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADU_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(recoverCADU_sptr self, std::string name)"""
        return _ccsds_swig.recoverCADU_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(recoverCADU_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.recoverCADU_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(recoverCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADU_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(recoverCADU_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADU_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(recoverCADU_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADU_sptr_message_subscribers(self, which_port)

recoverCADU_sptr_swigregister = _ccsds_swig.recoverCADU_sptr_swigregister
recoverCADU_sptr_swigregister(recoverCADU_sptr)


recoverCADU_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
recoverCADU = recoverCADU.make;

class encodeRS(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeRS.

    To avoid accidental use of raw pointers, ccsds::encodeRS's constructor is in a private implementation class. ccsds::encodeRS::make is the public interface for creating new instances.

    Args:
        code : 
        cbSize : 
        intDepth : 
        out_tag_key : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(code, cbSize, intDepth, out_tag_key, len_tag_key):
        """
        make(int code, int cbSize, int intDepth, std::string out_tag_key, std::string len_tag_key) -> encodeRS_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeRS.

        To avoid accidental use of raw pointers, ccsds::encodeRS's constructor is in a private implementation class. ccsds::encodeRS::make is the public interface for creating new instances.

        Args:
            code : 
            cbSize : 
            intDepth : 
            out_tag_key : 
            len_tag_key : 
        """
        return _ccsds_swig.encodeRS_make(code, cbSize, intDepth, out_tag_key, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_encodeRS
    __del__ = lambda self: None
encodeRS_swigregister = _ccsds_swig.encodeRS_swigregister
encodeRS_swigregister(encodeRS)

def encodeRS_make(code, cbSize, intDepth, out_tag_key, len_tag_key):
    """
    encodeRS_make(int code, int cbSize, int intDepth, std::string out_tag_key, std::string len_tag_key) -> encodeRS_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeRS.

    To avoid accidental use of raw pointers, ccsds::encodeRS's constructor is in a private implementation class. ccsds::encodeRS::make is the public interface for creating new instances.

    Args:
        code : 
        cbSize : 
        intDepth : 
        out_tag_key : 
        len_tag_key : 
    """
    return _ccsds_swig.encodeRS_make(code, cbSize, intDepth, out_tag_key, len_tag_key)

class encodeRS_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::encodeRS)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::encodeRS)> self) -> encodeRS_sptr
        __init__(boost::shared_ptr<(gr::ccsds::encodeRS)> self, encodeRS p) -> encodeRS_sptr
        """
        this = _ccsds_swig.new_encodeRS_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(encodeRS_sptr self) -> encodeRS"""
        return _ccsds_swig.encodeRS_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_encodeRS_sptr
    __del__ = lambda self: None

    def make(self, code, cbSize, intDepth, out_tag_key, len_tag_key):
        """
        make(encodeRS_sptr self, int code, int cbSize, int intDepth, std::string out_tag_key, std::string len_tag_key) -> encodeRS_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeRS.

        To avoid accidental use of raw pointers, ccsds::encodeRS's constructor is in a private implementation class. ccsds::encodeRS::make is the public interface for creating new instances.

        Args:
            code : 
            cbSize : 
            intDepth : 
            out_tag_key : 
            len_tag_key : 
        """
        return _ccsds_swig.encodeRS_sptr_make(self, code, cbSize, intDepth, out_tag_key, len_tag_key)


    def history(self):
        """history(encodeRS_sptr self) -> unsigned int"""
        return _ccsds_swig.encodeRS_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encodeRS_sptr self, int which, int delay)
        declare_sample_delay(encodeRS_sptr self, unsigned int delay)
        """
        return _ccsds_swig.encodeRS_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(encodeRS_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.encodeRS_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(encodeRS_sptr self) -> int"""
        return _ccsds_swig.encodeRS_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(encodeRS_sptr self) -> double"""
        return _ccsds_swig.encodeRS_sptr_relative_rate(self)


    def start(self):
        """start(encodeRS_sptr self) -> bool"""
        return _ccsds_swig.encodeRS_sptr_start(self)


    def stop(self):
        """stop(encodeRS_sptr self) -> bool"""
        return _ccsds_swig.encodeRS_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(encodeRS_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.encodeRS_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(encodeRS_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.encodeRS_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(encodeRS_sptr self) -> int"""
        return _ccsds_swig.encodeRS_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(encodeRS_sptr self, int m)"""
        return _ccsds_swig.encodeRS_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encodeRS_sptr self)"""
        return _ccsds_swig.encodeRS_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encodeRS_sptr self) -> bool"""
        return _ccsds_swig.encodeRS_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(encodeRS_sptr self, int m)"""
        return _ccsds_swig.encodeRS_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(encodeRS_sptr self) -> int"""
        return _ccsds_swig.encodeRS_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(encodeRS_sptr self, int i) -> long"""
        return _ccsds_swig.encodeRS_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encodeRS_sptr self, long max_output_buffer)
        set_max_output_buffer(encodeRS_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.encodeRS_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(encodeRS_sptr self, int i) -> long"""
        return _ccsds_swig.encodeRS_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encodeRS_sptr self, long min_output_buffer)
        set_min_output_buffer(encodeRS_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.encodeRS_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encodeRS_sptr self, int which) -> float
        pc_input_buffers_full(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encodeRS_sptr self, int which) -> float
        pc_input_buffers_full_avg(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encodeRS_sptr self, int which) -> float
        pc_input_buffers_full_var(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encodeRS_sptr self, int which) -> float
        pc_output_buffers_full(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encodeRS_sptr self, int which) -> float
        pc_output_buffers_full_avg(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encodeRS_sptr self, int which) -> float
        pc_output_buffers_full_var(encodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeRS_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(encodeRS_sptr self) -> float"""
        return _ccsds_swig.encodeRS_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(encodeRS_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.encodeRS_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(encodeRS_sptr self)"""
        return _ccsds_swig.encodeRS_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(encodeRS_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.encodeRS_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(encodeRS_sptr self) -> int"""
        return _ccsds_swig.encodeRS_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(encodeRS_sptr self) -> int"""
        return _ccsds_swig.encodeRS_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(encodeRS_sptr self, int priority) -> int"""
        return _ccsds_swig.encodeRS_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(encodeRS_sptr self) -> std::string"""
        return _ccsds_swig.encodeRS_sptr_name(self)


    def symbol_name(self):
        """symbol_name(encodeRS_sptr self) -> std::string"""
        return _ccsds_swig.encodeRS_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(encodeRS_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeRS_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(encodeRS_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeRS_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(encodeRS_sptr self) -> long"""
        return _ccsds_swig.encodeRS_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(encodeRS_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.encodeRS_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(encodeRS_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.encodeRS_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(encodeRS_sptr self) -> std::string"""
        return _ccsds_swig.encodeRS_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(encodeRS_sptr self, std::string name)"""
        return _ccsds_swig.encodeRS_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(encodeRS_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.encodeRS_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(encodeRS_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeRS_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(encodeRS_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeRS_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(encodeRS_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.encodeRS_sptr_message_subscribers(self, which_port)

encodeRS_sptr_swigregister = _ccsds_swig.encodeRS_sptr_swigregister
encodeRS_sptr_swigregister(encodeRS_sptr)


encodeRS_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encodeRS = encodeRS.make;

class decodeRS(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeRS.

    To avoid accidental use of raw pointers, ccsds::decodeRS's constructor is in a private implementation class. ccsds::decodeRS::make is the public interface for creating new instances.

    Args:
        code : 
        intDepth : 
        pass_all : 
        fert : 
        wert : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(code, intDepth, pass_all, fert, wert):
        """
        make(int code, int intDepth, int pass_all, int fert, int wert) -> decodeRS_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeRS.

        To avoid accidental use of raw pointers, ccsds::decodeRS's constructor is in a private implementation class. ccsds::decodeRS::make is the public interface for creating new instances.

        Args:
            code : 
            intDepth : 
            pass_all : 
            fert : 
            wert : 
        """
        return _ccsds_swig.decodeRS_make(code, intDepth, pass_all, fert, wert)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_decodeRS
    __del__ = lambda self: None
decodeRS_swigregister = _ccsds_swig.decodeRS_swigregister
decodeRS_swigregister(decodeRS)

def decodeRS_make(code, intDepth, pass_all, fert, wert):
    """
    decodeRS_make(int code, int intDepth, int pass_all, int fert, int wert) -> decodeRS_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeRS.

    To avoid accidental use of raw pointers, ccsds::decodeRS's constructor is in a private implementation class. ccsds::decodeRS::make is the public interface for creating new instances.

    Args:
        code : 
        intDepth : 
        pass_all : 
        fert : 
        wert : 
    """
    return _ccsds_swig.decodeRS_make(code, intDepth, pass_all, fert, wert)

class decodeRS_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::decodeRS)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::decodeRS)> self) -> decodeRS_sptr
        __init__(boost::shared_ptr<(gr::ccsds::decodeRS)> self, decodeRS p) -> decodeRS_sptr
        """
        this = _ccsds_swig.new_decodeRS_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decodeRS_sptr self) -> decodeRS"""
        return _ccsds_swig.decodeRS_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_decodeRS_sptr
    __del__ = lambda self: None

    def make(self, code, intDepth, pass_all, fert, wert):
        """
        make(decodeRS_sptr self, int code, int intDepth, int pass_all, int fert, int wert) -> decodeRS_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeRS.

        To avoid accidental use of raw pointers, ccsds::decodeRS's constructor is in a private implementation class. ccsds::decodeRS::make is the public interface for creating new instances.

        Args:
            code : 
            intDepth : 
            pass_all : 
            fert : 
            wert : 
        """
        return _ccsds_swig.decodeRS_sptr_make(self, code, intDepth, pass_all, fert, wert)


    def history(self):
        """history(decodeRS_sptr self) -> unsigned int"""
        return _ccsds_swig.decodeRS_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decodeRS_sptr self, int which, int delay)
        declare_sample_delay(decodeRS_sptr self, unsigned int delay)
        """
        return _ccsds_swig.decodeRS_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decodeRS_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.decodeRS_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decodeRS_sptr self) -> int"""
        return _ccsds_swig.decodeRS_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decodeRS_sptr self) -> double"""
        return _ccsds_swig.decodeRS_sptr_relative_rate(self)


    def start(self):
        """start(decodeRS_sptr self) -> bool"""
        return _ccsds_swig.decodeRS_sptr_start(self)


    def stop(self):
        """stop(decodeRS_sptr self) -> bool"""
        return _ccsds_swig.decodeRS_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decodeRS_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.decodeRS_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decodeRS_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.decodeRS_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decodeRS_sptr self) -> int"""
        return _ccsds_swig.decodeRS_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decodeRS_sptr self, int m)"""
        return _ccsds_swig.decodeRS_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decodeRS_sptr self)"""
        return _ccsds_swig.decodeRS_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decodeRS_sptr self) -> bool"""
        return _ccsds_swig.decodeRS_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decodeRS_sptr self, int m)"""
        return _ccsds_swig.decodeRS_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decodeRS_sptr self) -> int"""
        return _ccsds_swig.decodeRS_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decodeRS_sptr self, int i) -> long"""
        return _ccsds_swig.decodeRS_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decodeRS_sptr self, long max_output_buffer)
        set_max_output_buffer(decodeRS_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.decodeRS_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decodeRS_sptr self, int i) -> long"""
        return _ccsds_swig.decodeRS_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decodeRS_sptr self, long min_output_buffer)
        set_min_output_buffer(decodeRS_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.decodeRS_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decodeRS_sptr self, int which) -> float
        pc_input_buffers_full(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decodeRS_sptr self, int which) -> float
        pc_input_buffers_full_avg(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decodeRS_sptr self, int which) -> float
        pc_input_buffers_full_var(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decodeRS_sptr self, int which) -> float
        pc_output_buffers_full(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decodeRS_sptr self, int which) -> float
        pc_output_buffers_full_avg(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decodeRS_sptr self, int which) -> float
        pc_output_buffers_full_var(decodeRS_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeRS_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decodeRS_sptr self) -> float"""
        return _ccsds_swig.decodeRS_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decodeRS_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.decodeRS_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decodeRS_sptr self)"""
        return _ccsds_swig.decodeRS_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decodeRS_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.decodeRS_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decodeRS_sptr self) -> int"""
        return _ccsds_swig.decodeRS_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decodeRS_sptr self) -> int"""
        return _ccsds_swig.decodeRS_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decodeRS_sptr self, int priority) -> int"""
        return _ccsds_swig.decodeRS_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decodeRS_sptr self) -> std::string"""
        return _ccsds_swig.decodeRS_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decodeRS_sptr self) -> std::string"""
        return _ccsds_swig.decodeRS_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decodeRS_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeRS_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decodeRS_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeRS_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decodeRS_sptr self) -> long"""
        return _ccsds_swig.decodeRS_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decodeRS_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.decodeRS_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decodeRS_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.decodeRS_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decodeRS_sptr self) -> std::string"""
        return _ccsds_swig.decodeRS_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decodeRS_sptr self, std::string name)"""
        return _ccsds_swig.decodeRS_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decodeRS_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.decodeRS_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decodeRS_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeRS_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decodeRS_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeRS_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decodeRS_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.decodeRS_sptr_message_subscribers(self, which_port)

decodeRS_sptr_swigregister = _ccsds_swig.decodeRS_sptr_swigregister
decodeRS_sptr_swigregister(decodeRS_sptr)


decodeRS_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decodeRS = decodeRS.make;

class encodeTurbo(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeTurbo.

    To avoid accidental use of raw pointers, ccsds::encodeTurbo's constructor is in a private implementation class. ccsds::encodeTurbo::make is the public interface for creating new instances.

    Args:
        base : 
        type : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(base, type, len_tag_key):
        """
        make(int base, int type, std::string len_tag_key) -> encodeTurbo_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeTurbo.

        To avoid accidental use of raw pointers, ccsds::encodeTurbo's constructor is in a private implementation class. ccsds::encodeTurbo::make is the public interface for creating new instances.

        Args:
            base : 
            type : 
            len_tag_key : 
        """
        return _ccsds_swig.encodeTurbo_make(base, type, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_encodeTurbo
    __del__ = lambda self: None
encodeTurbo_swigregister = _ccsds_swig.encodeTurbo_swigregister
encodeTurbo_swigregister(encodeTurbo)

def encodeTurbo_make(base, type, len_tag_key):
    """
    encodeTurbo_make(int base, int type, std::string len_tag_key) -> encodeTurbo_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeTurbo.

    To avoid accidental use of raw pointers, ccsds::encodeTurbo's constructor is in a private implementation class. ccsds::encodeTurbo::make is the public interface for creating new instances.

    Args:
        base : 
        type : 
        len_tag_key : 
    """
    return _ccsds_swig.encodeTurbo_make(base, type, len_tag_key)

class encodeTurbo_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::encodeTurbo)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::encodeTurbo)> self) -> encodeTurbo_sptr
        __init__(boost::shared_ptr<(gr::ccsds::encodeTurbo)> self, encodeTurbo p) -> encodeTurbo_sptr
        """
        this = _ccsds_swig.new_encodeTurbo_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(encodeTurbo_sptr self) -> encodeTurbo"""
        return _ccsds_swig.encodeTurbo_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_encodeTurbo_sptr
    __del__ = lambda self: None

    def make(self, base, type, len_tag_key):
        """
        make(encodeTurbo_sptr self, int base, int type, std::string len_tag_key) -> encodeTurbo_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeTurbo.

        To avoid accidental use of raw pointers, ccsds::encodeTurbo's constructor is in a private implementation class. ccsds::encodeTurbo::make is the public interface for creating new instances.

        Args:
            base : 
            type : 
            len_tag_key : 
        """
        return _ccsds_swig.encodeTurbo_sptr_make(self, base, type, len_tag_key)


    def history(self):
        """history(encodeTurbo_sptr self) -> unsigned int"""
        return _ccsds_swig.encodeTurbo_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encodeTurbo_sptr self, int which, int delay)
        declare_sample_delay(encodeTurbo_sptr self, unsigned int delay)
        """
        return _ccsds_swig.encodeTurbo_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(encodeTurbo_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.encodeTurbo_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(encodeTurbo_sptr self) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(encodeTurbo_sptr self) -> double"""
        return _ccsds_swig.encodeTurbo_sptr_relative_rate(self)


    def start(self):
        """start(encodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.encodeTurbo_sptr_start(self)


    def stop(self):
        """stop(encodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.encodeTurbo_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(encodeTurbo_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.encodeTurbo_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(encodeTurbo_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.encodeTurbo_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(encodeTurbo_sptr self) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(encodeTurbo_sptr self, int m)"""
        return _ccsds_swig.encodeTurbo_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encodeTurbo_sptr self)"""
        return _ccsds_swig.encodeTurbo_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.encodeTurbo_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(encodeTurbo_sptr self, int m)"""
        return _ccsds_swig.encodeTurbo_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(encodeTurbo_sptr self) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(encodeTurbo_sptr self, int i) -> long"""
        return _ccsds_swig.encodeTurbo_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encodeTurbo_sptr self, long max_output_buffer)
        set_max_output_buffer(encodeTurbo_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.encodeTurbo_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(encodeTurbo_sptr self, int i) -> long"""
        return _ccsds_swig.encodeTurbo_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encodeTurbo_sptr self, long min_output_buffer)
        set_min_output_buffer(encodeTurbo_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.encodeTurbo_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full_avg(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full_var(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full_avg(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full_var(encodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeTurbo_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(encodeTurbo_sptr self) -> float"""
        return _ccsds_swig.encodeTurbo_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(encodeTurbo_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.encodeTurbo_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(encodeTurbo_sptr self)"""
        return _ccsds_swig.encodeTurbo_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(encodeTurbo_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.encodeTurbo_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(encodeTurbo_sptr self) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(encodeTurbo_sptr self) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(encodeTurbo_sptr self, int priority) -> int"""
        return _ccsds_swig.encodeTurbo_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(encodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.encodeTurbo_sptr_name(self)


    def symbol_name(self):
        """symbol_name(encodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.encodeTurbo_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(encodeTurbo_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeTurbo_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(encodeTurbo_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeTurbo_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(encodeTurbo_sptr self) -> long"""
        return _ccsds_swig.encodeTurbo_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(encodeTurbo_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.encodeTurbo_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(encodeTurbo_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.encodeTurbo_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(encodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.encodeTurbo_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(encodeTurbo_sptr self, std::string name)"""
        return _ccsds_swig.encodeTurbo_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(encodeTurbo_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.encodeTurbo_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(encodeTurbo_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeTurbo_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(encodeTurbo_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeTurbo_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(encodeTurbo_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.encodeTurbo_sptr_message_subscribers(self, which_port)

encodeTurbo_sptr_swigregister = _ccsds_swig.encodeTurbo_sptr_swigregister
encodeTurbo_sptr_swigregister(encodeTurbo_sptr)


encodeTurbo_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encodeTurbo = encodeTurbo.make;

class synchronizeCADUSoft(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADUSoft.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADUSoft's constructor is in a private implementation class. ccsds::synchronizeCADUSoft::make is the public interface for creating new instances.

    Args:
        sync : 
        stl : 
        lts : 
        slip : 
        frame_size : 
        fec : 
        invCC : 
        tag_name : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sync, stl, lts, slip, frame_size, fec, invCC, tag_name):
        """
        make(std::string sync, int stl, int lts, int slip, int frame_size, int fec, int invCC, std::string tag_name) -> synchronizeCADUSoft_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADUSoft.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADUSoft's constructor is in a private implementation class. ccsds::synchronizeCADUSoft::make is the public interface for creating new instances.

        Args:
            sync : 
            stl : 
            lts : 
            slip : 
            frame_size : 
            fec : 
            invCC : 
            tag_name : 
        """
        return _ccsds_swig.synchronizeCADUSoft_make(sync, stl, lts, slip, frame_size, fec, invCC, tag_name)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADUSoft
    __del__ = lambda self: None
synchronizeCADUSoft_swigregister = _ccsds_swig.synchronizeCADUSoft_swigregister
synchronizeCADUSoft_swigregister(synchronizeCADUSoft)

def synchronizeCADUSoft_make(sync, stl, lts, slip, frame_size, fec, invCC, tag_name):
    """
    synchronizeCADUSoft_make(std::string sync, int stl, int lts, int slip, int frame_size, int fec, int invCC, std::string tag_name) -> synchronizeCADUSoft_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADUSoft.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADUSoft's constructor is in a private implementation class. ccsds::synchronizeCADUSoft::make is the public interface for creating new instances.

    Args:
        sync : 
        stl : 
        lts : 
        slip : 
        frame_size : 
        fec : 
        invCC : 
        tag_name : 
    """
    return _ccsds_swig.synchronizeCADUSoft_make(sync, stl, lts, slip, frame_size, fec, invCC, tag_name)

class synchronizeCADUSoft_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::synchronizeCADUSoft)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADUSoft)> self) -> synchronizeCADUSoft_sptr
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADUSoft)> self, synchronizeCADUSoft p) -> synchronizeCADUSoft_sptr
        """
        this = _ccsds_swig.new_synchronizeCADUSoft_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(synchronizeCADUSoft_sptr self) -> synchronizeCADUSoft"""
        return _ccsds_swig.synchronizeCADUSoft_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADUSoft_sptr
    __del__ = lambda self: None

    def make(self, sync, stl, lts, slip, frame_size, fec, invCC, tag_name):
        """
        make(synchronizeCADUSoft_sptr self, std::string sync, int stl, int lts, int slip, int frame_size, int fec, int invCC, std::string tag_name) -> synchronizeCADUSoft_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADUSoft.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADUSoft's constructor is in a private implementation class. ccsds::synchronizeCADUSoft::make is the public interface for creating new instances.

        Args:
            sync : 
            stl : 
            lts : 
            slip : 
            frame_size : 
            fec : 
            invCC : 
            tag_name : 
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_make(self, sync, stl, lts, slip, frame_size, fec, invCC, tag_name)


    def history(self):
        """history(synchronizeCADUSoft_sptr self) -> unsigned int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(synchronizeCADUSoft_sptr self, int which, int delay)
        declare_sample_delay(synchronizeCADUSoft_sptr self, unsigned int delay)
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(synchronizeCADUSoft_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(synchronizeCADUSoft_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(synchronizeCADUSoft_sptr self) -> double"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_relative_rate(self)


    def start(self):
        """start(synchronizeCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_start(self)


    def stop(self):
        """stop(synchronizeCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(synchronizeCADUSoft_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(synchronizeCADUSoft_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(synchronizeCADUSoft_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(synchronizeCADUSoft_sptr self, int m)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(synchronizeCADUSoft_sptr self)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(synchronizeCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(synchronizeCADUSoft_sptr self, int m)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(synchronizeCADUSoft_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(synchronizeCADUSoft_sptr self, int i) -> long"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synchronizeCADUSoft_sptr self, long max_output_buffer)
        set_max_output_buffer(synchronizeCADUSoft_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(synchronizeCADUSoft_sptr self, int i) -> long"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synchronizeCADUSoft_sptr self, long min_output_buffer)
        set_min_output_buffer(synchronizeCADUSoft_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(synchronizeCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(synchronizeCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full_avg(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(synchronizeCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full_var(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(synchronizeCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(synchronizeCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full_avg(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(synchronizeCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full_var(synchronizeCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(synchronizeCADUSoft_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(synchronizeCADUSoft_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(synchronizeCADUSoft_sptr self)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(synchronizeCADUSoft_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(synchronizeCADUSoft_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(synchronizeCADUSoft_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(synchronizeCADUSoft_sptr self, int priority) -> int"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(synchronizeCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_name(self)


    def symbol_name(self):
        """symbol_name(synchronizeCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(synchronizeCADUSoft_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(synchronizeCADUSoft_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(synchronizeCADUSoft_sptr self) -> long"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(synchronizeCADUSoft_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(synchronizeCADUSoft_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(synchronizeCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(synchronizeCADUSoft_sptr self, std::string name)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(synchronizeCADUSoft_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.synchronizeCADUSoft_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(synchronizeCADUSoft_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(synchronizeCADUSoft_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(synchronizeCADUSoft_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUSoft_sptr_message_subscribers(self, which_port)

synchronizeCADUSoft_sptr_swigregister = _ccsds_swig.synchronizeCADUSoft_sptr_swigregister
synchronizeCADUSoft_sptr_swigregister(synchronizeCADUSoft_sptr)


synchronizeCADUSoft_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synchronizeCADUSoft = synchronizeCADUSoft.make;

class recoverCADUSoft(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::recoverCADUSoft.

    To avoid accidental use of raw pointers, ccsds::recoverCADUSoft's constructor is in a private implementation class. ccsds::recoverCADUSoft::make is the public interface for creating new instances.

    Args:
        frame_length : 
        scramble : 
        tag_name : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_length, scramble, tag_name):
        """
        make(int frame_length, int scramble, std::string tag_name) -> recoverCADUSoft_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::recoverCADUSoft.

        To avoid accidental use of raw pointers, ccsds::recoverCADUSoft's constructor is in a private implementation class. ccsds::recoverCADUSoft::make is the public interface for creating new instances.

        Args:
            frame_length : 
            scramble : 
            tag_name : 
        """
        return _ccsds_swig.recoverCADUSoft_make(frame_length, scramble, tag_name)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_recoverCADUSoft
    __del__ = lambda self: None
recoverCADUSoft_swigregister = _ccsds_swig.recoverCADUSoft_swigregister
recoverCADUSoft_swigregister(recoverCADUSoft)

def recoverCADUSoft_make(frame_length, scramble, tag_name):
    """
    recoverCADUSoft_make(int frame_length, int scramble, std::string tag_name) -> recoverCADUSoft_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::recoverCADUSoft.

    To avoid accidental use of raw pointers, ccsds::recoverCADUSoft's constructor is in a private implementation class. ccsds::recoverCADUSoft::make is the public interface for creating new instances.

    Args:
        frame_length : 
        scramble : 
        tag_name : 
    """
    return _ccsds_swig.recoverCADUSoft_make(frame_length, scramble, tag_name)

class recoverCADUSoft_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::recoverCADUSoft)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::recoverCADUSoft)> self) -> recoverCADUSoft_sptr
        __init__(boost::shared_ptr<(gr::ccsds::recoverCADUSoft)> self, recoverCADUSoft p) -> recoverCADUSoft_sptr
        """
        this = _ccsds_swig.new_recoverCADUSoft_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(recoverCADUSoft_sptr self) -> recoverCADUSoft"""
        return _ccsds_swig.recoverCADUSoft_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_recoverCADUSoft_sptr
    __del__ = lambda self: None

    def make(self, frame_length, scramble, tag_name):
        """
        make(recoverCADUSoft_sptr self, int frame_length, int scramble, std::string tag_name) -> recoverCADUSoft_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::recoverCADUSoft.

        To avoid accidental use of raw pointers, ccsds::recoverCADUSoft's constructor is in a private implementation class. ccsds::recoverCADUSoft::make is the public interface for creating new instances.

        Args:
            frame_length : 
            scramble : 
            tag_name : 
        """
        return _ccsds_swig.recoverCADUSoft_sptr_make(self, frame_length, scramble, tag_name)


    def history(self):
        """history(recoverCADUSoft_sptr self) -> unsigned int"""
        return _ccsds_swig.recoverCADUSoft_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(recoverCADUSoft_sptr self, int which, int delay)
        declare_sample_delay(recoverCADUSoft_sptr self, unsigned int delay)
        """
        return _ccsds_swig.recoverCADUSoft_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(recoverCADUSoft_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.recoverCADUSoft_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(recoverCADUSoft_sptr self) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(recoverCADUSoft_sptr self) -> double"""
        return _ccsds_swig.recoverCADUSoft_sptr_relative_rate(self)


    def start(self):
        """start(recoverCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.recoverCADUSoft_sptr_start(self)


    def stop(self):
        """stop(recoverCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.recoverCADUSoft_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(recoverCADUSoft_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.recoverCADUSoft_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(recoverCADUSoft_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.recoverCADUSoft_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(recoverCADUSoft_sptr self) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(recoverCADUSoft_sptr self, int m)"""
        return _ccsds_swig.recoverCADUSoft_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(recoverCADUSoft_sptr self)"""
        return _ccsds_swig.recoverCADUSoft_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(recoverCADUSoft_sptr self) -> bool"""
        return _ccsds_swig.recoverCADUSoft_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(recoverCADUSoft_sptr self, int m)"""
        return _ccsds_swig.recoverCADUSoft_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(recoverCADUSoft_sptr self) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(recoverCADUSoft_sptr self, int i) -> long"""
        return _ccsds_swig.recoverCADUSoft_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(recoverCADUSoft_sptr self, long max_output_buffer)
        set_max_output_buffer(recoverCADUSoft_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.recoverCADUSoft_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(recoverCADUSoft_sptr self, int i) -> long"""
        return _ccsds_swig.recoverCADUSoft_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(recoverCADUSoft_sptr self, long min_output_buffer)
        set_min_output_buffer(recoverCADUSoft_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.recoverCADUSoft_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(recoverCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(recoverCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full_avg(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(recoverCADUSoft_sptr self, int which) -> float
        pc_input_buffers_full_var(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(recoverCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(recoverCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full_avg(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(recoverCADUSoft_sptr self, int which) -> float
        pc_output_buffers_full_var(recoverCADUSoft_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.recoverCADUSoft_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(recoverCADUSoft_sptr self) -> float"""
        return _ccsds_swig.recoverCADUSoft_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(recoverCADUSoft_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.recoverCADUSoft_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(recoverCADUSoft_sptr self)"""
        return _ccsds_swig.recoverCADUSoft_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(recoverCADUSoft_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.recoverCADUSoft_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(recoverCADUSoft_sptr self) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(recoverCADUSoft_sptr self) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(recoverCADUSoft_sptr self, int priority) -> int"""
        return _ccsds_swig.recoverCADUSoft_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(recoverCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADUSoft_sptr_name(self)


    def symbol_name(self):
        """symbol_name(recoverCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADUSoft_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(recoverCADUSoft_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(recoverCADUSoft_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(recoverCADUSoft_sptr self) -> long"""
        return _ccsds_swig.recoverCADUSoft_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(recoverCADUSoft_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(recoverCADUSoft_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.recoverCADUSoft_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(recoverCADUSoft_sptr self) -> std::string"""
        return _ccsds_swig.recoverCADUSoft_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(recoverCADUSoft_sptr self, std::string name)"""
        return _ccsds_swig.recoverCADUSoft_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(recoverCADUSoft_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.recoverCADUSoft_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(recoverCADUSoft_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(recoverCADUSoft_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(recoverCADUSoft_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.recoverCADUSoft_sptr_message_subscribers(self, which_port)

recoverCADUSoft_sptr_swigregister = _ccsds_swig.recoverCADUSoft_sptr_swigregister
recoverCADUSoft_sptr_swigregister(recoverCADUSoft_sptr)


recoverCADUSoft_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
recoverCADUSoft = recoverCADUSoft.make;

class decodeTurbo(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeTurbo.

    To avoid accidental use of raw pointers, ccsds::decodeTurbo's constructor is in a private implementation class. ccsds::decodeTurbo::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(base, octets, code_type, iterations, sigma, update_sigma):
        """
        make(int base, int octets, int code_type, int iterations, float sigma, uint8_t update_sigma) -> decodeTurbo_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeTurbo.

        To avoid accidental use of raw pointers, ccsds::decodeTurbo's constructor is in a private implementation class. ccsds::decodeTurbo::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
        """
        return _ccsds_swig.decodeTurbo_make(base, octets, code_type, iterations, sigma, update_sigma)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_decodeTurbo
    __del__ = lambda self: None
decodeTurbo_swigregister = _ccsds_swig.decodeTurbo_swigregister
decodeTurbo_swigregister(decodeTurbo)

def decodeTurbo_make(base, octets, code_type, iterations, sigma, update_sigma):
    """
    decodeTurbo_make(int base, int octets, int code_type, int iterations, float sigma, uint8_t update_sigma) -> decodeTurbo_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeTurbo.

    To avoid accidental use of raw pointers, ccsds::decodeTurbo's constructor is in a private implementation class. ccsds::decodeTurbo::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
    """
    return _ccsds_swig.decodeTurbo_make(base, octets, code_type, iterations, sigma, update_sigma)

class decodeTurbo_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::decodeTurbo)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::decodeTurbo)> self) -> decodeTurbo_sptr
        __init__(boost::shared_ptr<(gr::ccsds::decodeTurbo)> self, decodeTurbo p) -> decodeTurbo_sptr
        """
        this = _ccsds_swig.new_decodeTurbo_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decodeTurbo_sptr self) -> decodeTurbo"""
        return _ccsds_swig.decodeTurbo_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_decodeTurbo_sptr
    __del__ = lambda self: None

    def make(self, base, octets, code_type, iterations, sigma, update_sigma):
        """
        make(decodeTurbo_sptr self, int base, int octets, int code_type, int iterations, float sigma, uint8_t update_sigma) -> decodeTurbo_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeTurbo.

        To avoid accidental use of raw pointers, ccsds::decodeTurbo's constructor is in a private implementation class. ccsds::decodeTurbo::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
        """
        return _ccsds_swig.decodeTurbo_sptr_make(self, base, octets, code_type, iterations, sigma, update_sigma)


    def history(self):
        """history(decodeTurbo_sptr self) -> unsigned int"""
        return _ccsds_swig.decodeTurbo_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decodeTurbo_sptr self, int which, int delay)
        declare_sample_delay(decodeTurbo_sptr self, unsigned int delay)
        """
        return _ccsds_swig.decodeTurbo_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decodeTurbo_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.decodeTurbo_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decodeTurbo_sptr self) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decodeTurbo_sptr self) -> double"""
        return _ccsds_swig.decodeTurbo_sptr_relative_rate(self)


    def start(self):
        """start(decodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.decodeTurbo_sptr_start(self)


    def stop(self):
        """stop(decodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.decodeTurbo_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decodeTurbo_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.decodeTurbo_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decodeTurbo_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.decodeTurbo_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decodeTurbo_sptr self) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decodeTurbo_sptr self, int m)"""
        return _ccsds_swig.decodeTurbo_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decodeTurbo_sptr self)"""
        return _ccsds_swig.decodeTurbo_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decodeTurbo_sptr self) -> bool"""
        return _ccsds_swig.decodeTurbo_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decodeTurbo_sptr self, int m)"""
        return _ccsds_swig.decodeTurbo_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decodeTurbo_sptr self) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decodeTurbo_sptr self, int i) -> long"""
        return _ccsds_swig.decodeTurbo_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decodeTurbo_sptr self, long max_output_buffer)
        set_max_output_buffer(decodeTurbo_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.decodeTurbo_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decodeTurbo_sptr self, int i) -> long"""
        return _ccsds_swig.decodeTurbo_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decodeTurbo_sptr self, long min_output_buffer)
        set_min_output_buffer(decodeTurbo_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.decodeTurbo_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full_avg(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decodeTurbo_sptr self, int which) -> float
        pc_input_buffers_full_var(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full_avg(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decodeTurbo_sptr self, int which) -> float
        pc_output_buffers_full_var(decodeTurbo_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeTurbo_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decodeTurbo_sptr self) -> float"""
        return _ccsds_swig.decodeTurbo_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decodeTurbo_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.decodeTurbo_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decodeTurbo_sptr self)"""
        return _ccsds_swig.decodeTurbo_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decodeTurbo_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.decodeTurbo_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decodeTurbo_sptr self) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decodeTurbo_sptr self) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decodeTurbo_sptr self, int priority) -> int"""
        return _ccsds_swig.decodeTurbo_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.decodeTurbo_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.decodeTurbo_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decodeTurbo_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeTurbo_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decodeTurbo_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeTurbo_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decodeTurbo_sptr self) -> long"""
        return _ccsds_swig.decodeTurbo_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decodeTurbo_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.decodeTurbo_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decodeTurbo_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.decodeTurbo_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decodeTurbo_sptr self) -> std::string"""
        return _ccsds_swig.decodeTurbo_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decodeTurbo_sptr self, std::string name)"""
        return _ccsds_swig.decodeTurbo_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decodeTurbo_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.decodeTurbo_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decodeTurbo_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeTurbo_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decodeTurbo_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeTurbo_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decodeTurbo_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.decodeTurbo_sptr_message_subscribers(self, which_port)

decodeTurbo_sptr_swigregister = _ccsds_swig.decodeTurbo_sptr_swigregister
decodeTurbo_sptr_swigregister(decodeTurbo_sptr)


decodeTurbo_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decodeTurbo = decodeTurbo.make;

class synchronizeCADUHard(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADUHard.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADUHard's constructor is in a private implementation class. ccsds::synchronizeCADUHard::make is the public interface for creating new instances.

    Args:
        sync : 
        stl : 
        lts : 
        tin : 
        ambiguity : 
        frame_size : 
        verbose : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sync, stl, lts, tin, ambiguity, frame_size, verbose):
        """
        make(std::string sync, int stl, int lts, int tin, int ambiguity, int frame_size, int verbose) -> synchronizeCADUHard_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADUHard.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADUHard's constructor is in a private implementation class. ccsds::synchronizeCADUHard::make is the public interface for creating new instances.

        Args:
            sync : 
            stl : 
            lts : 
            tin : 
            ambiguity : 
            frame_size : 
            verbose : 
        """
        return _ccsds_swig.synchronizeCADUHard_make(sync, stl, lts, tin, ambiguity, frame_size, verbose)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADUHard
    __del__ = lambda self: None
synchronizeCADUHard_swigregister = _ccsds_swig.synchronizeCADUHard_swigregister
synchronizeCADUHard_swigregister(synchronizeCADUHard)

def synchronizeCADUHard_make(sync, stl, lts, tin, ambiguity, frame_size, verbose):
    """
    synchronizeCADUHard_make(std::string sync, int stl, int lts, int tin, int ambiguity, int frame_size, int verbose) -> synchronizeCADUHard_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::synchronizeCADUHard.

    To avoid accidental use of raw pointers, ccsds::synchronizeCADUHard's constructor is in a private implementation class. ccsds::synchronizeCADUHard::make is the public interface for creating new instances.

    Args:
        sync : 
        stl : 
        lts : 
        tin : 
        ambiguity : 
        frame_size : 
        verbose : 
    """
    return _ccsds_swig.synchronizeCADUHard_make(sync, stl, lts, tin, ambiguity, frame_size, verbose)

class synchronizeCADUHard_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::synchronizeCADUHard)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADUHard)> self) -> synchronizeCADUHard_sptr
        __init__(boost::shared_ptr<(gr::ccsds::synchronizeCADUHard)> self, synchronizeCADUHard p) -> synchronizeCADUHard_sptr
        """
        this = _ccsds_swig.new_synchronizeCADUHard_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(synchronizeCADUHard_sptr self) -> synchronizeCADUHard"""
        return _ccsds_swig.synchronizeCADUHard_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_synchronizeCADUHard_sptr
    __del__ = lambda self: None

    def make(self, sync, stl, lts, tin, ambiguity, frame_size, verbose):
        """
        make(synchronizeCADUHard_sptr self, std::string sync, int stl, int lts, int tin, int ambiguity, int frame_size, int verbose) -> synchronizeCADUHard_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::synchronizeCADUHard.

        To avoid accidental use of raw pointers, ccsds::synchronizeCADUHard's constructor is in a private implementation class. ccsds::synchronizeCADUHard::make is the public interface for creating new instances.

        Args:
            sync : 
            stl : 
            lts : 
            tin : 
            ambiguity : 
            frame_size : 
            verbose : 
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_make(self, sync, stl, lts, tin, ambiguity, frame_size, verbose)


    def history(self):
        """history(synchronizeCADUHard_sptr self) -> unsigned int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(synchronizeCADUHard_sptr self, int which, int delay)
        declare_sample_delay(synchronizeCADUHard_sptr self, unsigned int delay)
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(synchronizeCADUHard_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(synchronizeCADUHard_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(synchronizeCADUHard_sptr self) -> double"""
        return _ccsds_swig.synchronizeCADUHard_sptr_relative_rate(self)


    def start(self):
        """start(synchronizeCADUHard_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUHard_sptr_start(self)


    def stop(self):
        """stop(synchronizeCADUHard_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUHard_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(synchronizeCADUHard_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.synchronizeCADUHard_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(synchronizeCADUHard_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.synchronizeCADUHard_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(synchronizeCADUHard_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(synchronizeCADUHard_sptr self, int m)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(synchronizeCADUHard_sptr self)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(synchronizeCADUHard_sptr self) -> bool"""
        return _ccsds_swig.synchronizeCADUHard_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(synchronizeCADUHard_sptr self, int m)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(synchronizeCADUHard_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(synchronizeCADUHard_sptr self, int i) -> long"""
        return _ccsds_swig.synchronizeCADUHard_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synchronizeCADUHard_sptr self, long max_output_buffer)
        set_max_output_buffer(synchronizeCADUHard_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(synchronizeCADUHard_sptr self, int i) -> long"""
        return _ccsds_swig.synchronizeCADUHard_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synchronizeCADUHard_sptr self, long min_output_buffer)
        set_min_output_buffer(synchronizeCADUHard_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(synchronizeCADUHard_sptr self, int which) -> float
        pc_input_buffers_full(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(synchronizeCADUHard_sptr self, int which) -> float
        pc_input_buffers_full_avg(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(synchronizeCADUHard_sptr self, int which) -> float
        pc_input_buffers_full_var(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(synchronizeCADUHard_sptr self, int which) -> float
        pc_output_buffers_full(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(synchronizeCADUHard_sptr self, int which) -> float
        pc_output_buffers_full_avg(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(synchronizeCADUHard_sptr self, int which) -> float
        pc_output_buffers_full_var(synchronizeCADUHard_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(synchronizeCADUHard_sptr self) -> float"""
        return _ccsds_swig.synchronizeCADUHard_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(synchronizeCADUHard_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(synchronizeCADUHard_sptr self)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(synchronizeCADUHard_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.synchronizeCADUHard_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(synchronizeCADUHard_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(synchronizeCADUHard_sptr self) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(synchronizeCADUHard_sptr self, int priority) -> int"""
        return _ccsds_swig.synchronizeCADUHard_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(synchronizeCADUHard_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUHard_sptr_name(self)


    def symbol_name(self):
        """symbol_name(synchronizeCADUHard_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUHard_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(synchronizeCADUHard_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(synchronizeCADUHard_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(synchronizeCADUHard_sptr self) -> long"""
        return _ccsds_swig.synchronizeCADUHard_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(synchronizeCADUHard_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(synchronizeCADUHard_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.synchronizeCADUHard_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(synchronizeCADUHard_sptr self) -> std::string"""
        return _ccsds_swig.synchronizeCADUHard_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(synchronizeCADUHard_sptr self, std::string name)"""
        return _ccsds_swig.synchronizeCADUHard_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(synchronizeCADUHard_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.synchronizeCADUHard_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(synchronizeCADUHard_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(synchronizeCADUHard_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(synchronizeCADUHard_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.synchronizeCADUHard_sptr_message_subscribers(self, which_port)

synchronizeCADUHard_sptr_swigregister = _ccsds_swig.synchronizeCADUHard_sptr_swigregister
synchronizeCADUHard_sptr_swigregister(synchronizeCADUHard_sptr)


synchronizeCADUHard_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synchronizeCADUHard = synchronizeCADUHard.make;

class encodeLDPC(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeLDPC.

    To avoid accidental use of raw pointers, ccsds::encodeLDPC's constructor is in a private implementation class. ccsds::encodeLDPC::make is the public interface for creating new instances.

    Args:
        circulant_file : 
        code_type : 
        out_tag_key : 
        len_tag_key : 
        verbose : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(circulant_file, code_type, out_tag_key, len_tag_key, verbose):
        """
        make(std::string circulant_file, int code_type, std::string out_tag_key, std::string len_tag_key, int verbose) -> encodeLDPC_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeLDPC.

        To avoid accidental use of raw pointers, ccsds::encodeLDPC's constructor is in a private implementation class. ccsds::encodeLDPC::make is the public interface for creating new instances.

        Args:
            circulant_file : 
            code_type : 
            out_tag_key : 
            len_tag_key : 
            verbose : 
        """
        return _ccsds_swig.encodeLDPC_make(circulant_file, code_type, out_tag_key, len_tag_key, verbose)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_encodeLDPC
    __del__ = lambda self: None
encodeLDPC_swigregister = _ccsds_swig.encodeLDPC_swigregister
encodeLDPC_swigregister(encodeLDPC)

def encodeLDPC_make(circulant_file, code_type, out_tag_key, len_tag_key, verbose):
    """
    encodeLDPC_make(std::string circulant_file, int code_type, std::string out_tag_key, std::string len_tag_key, int verbose) -> encodeLDPC_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::encodeLDPC.

    To avoid accidental use of raw pointers, ccsds::encodeLDPC's constructor is in a private implementation class. ccsds::encodeLDPC::make is the public interface for creating new instances.

    Args:
        circulant_file : 
        code_type : 
        out_tag_key : 
        len_tag_key : 
        verbose : 
    """
    return _ccsds_swig.encodeLDPC_make(circulant_file, code_type, out_tag_key, len_tag_key, verbose)

class encodeLDPC_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::encodeLDPC)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::encodeLDPC)> self) -> encodeLDPC_sptr
        __init__(boost::shared_ptr<(gr::ccsds::encodeLDPC)> self, encodeLDPC p) -> encodeLDPC_sptr
        """
        this = _ccsds_swig.new_encodeLDPC_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(encodeLDPC_sptr self) -> encodeLDPC"""
        return _ccsds_swig.encodeLDPC_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_encodeLDPC_sptr
    __del__ = lambda self: None

    def make(self, circulant_file, code_type, out_tag_key, len_tag_key, verbose):
        """
        make(encodeLDPC_sptr self, std::string circulant_file, int code_type, std::string out_tag_key, std::string len_tag_key, int verbose) -> encodeLDPC_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::encodeLDPC.

        To avoid accidental use of raw pointers, ccsds::encodeLDPC's constructor is in a private implementation class. ccsds::encodeLDPC::make is the public interface for creating new instances.

        Args:
            circulant_file : 
            code_type : 
            out_tag_key : 
            len_tag_key : 
            verbose : 
        """
        return _ccsds_swig.encodeLDPC_sptr_make(self, circulant_file, code_type, out_tag_key, len_tag_key, verbose)


    def history(self):
        """history(encodeLDPC_sptr self) -> unsigned int"""
        return _ccsds_swig.encodeLDPC_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encodeLDPC_sptr self, int which, int delay)
        declare_sample_delay(encodeLDPC_sptr self, unsigned int delay)
        """
        return _ccsds_swig.encodeLDPC_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(encodeLDPC_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.encodeLDPC_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(encodeLDPC_sptr self) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(encodeLDPC_sptr self) -> double"""
        return _ccsds_swig.encodeLDPC_sptr_relative_rate(self)


    def start(self):
        """start(encodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.encodeLDPC_sptr_start(self)


    def stop(self):
        """stop(encodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.encodeLDPC_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(encodeLDPC_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.encodeLDPC_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(encodeLDPC_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.encodeLDPC_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(encodeLDPC_sptr self) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(encodeLDPC_sptr self, int m)"""
        return _ccsds_swig.encodeLDPC_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encodeLDPC_sptr self)"""
        return _ccsds_swig.encodeLDPC_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.encodeLDPC_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(encodeLDPC_sptr self, int m)"""
        return _ccsds_swig.encodeLDPC_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(encodeLDPC_sptr self) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(encodeLDPC_sptr self, int i) -> long"""
        return _ccsds_swig.encodeLDPC_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encodeLDPC_sptr self, long max_output_buffer)
        set_max_output_buffer(encodeLDPC_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.encodeLDPC_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(encodeLDPC_sptr self, int i) -> long"""
        return _ccsds_swig.encodeLDPC_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encodeLDPC_sptr self, long min_output_buffer)
        set_min_output_buffer(encodeLDPC_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.encodeLDPC_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full_avg(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full_var(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full_avg(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full_var(encodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.encodeLDPC_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(encodeLDPC_sptr self) -> float"""
        return _ccsds_swig.encodeLDPC_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(encodeLDPC_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.encodeLDPC_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(encodeLDPC_sptr self)"""
        return _ccsds_swig.encodeLDPC_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(encodeLDPC_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.encodeLDPC_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(encodeLDPC_sptr self) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(encodeLDPC_sptr self) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(encodeLDPC_sptr self, int priority) -> int"""
        return _ccsds_swig.encodeLDPC_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(encodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.encodeLDPC_sptr_name(self)


    def symbol_name(self):
        """symbol_name(encodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.encodeLDPC_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(encodeLDPC_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeLDPC_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(encodeLDPC_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.encodeLDPC_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(encodeLDPC_sptr self) -> long"""
        return _ccsds_swig.encodeLDPC_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(encodeLDPC_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.encodeLDPC_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(encodeLDPC_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.encodeLDPC_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(encodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.encodeLDPC_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(encodeLDPC_sptr self, std::string name)"""
        return _ccsds_swig.encodeLDPC_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(encodeLDPC_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.encodeLDPC_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(encodeLDPC_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeLDPC_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(encodeLDPC_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.encodeLDPC_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(encodeLDPC_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.encodeLDPC_sptr_message_subscribers(self, which_port)

encodeLDPC_sptr_swigregister = _ccsds_swig.encodeLDPC_sptr_swigregister
encodeLDPC_sptr_swigregister(encodeLDPC_sptr)


encodeLDPC_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encodeLDPC = encodeLDPC.make;

class decodeLDPC(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeLDPC.

    To avoid accidental use of raw pointers, ccsds::decodeLDPC's constructor is in a private implementation class. ccsds::decodeLDPC::make is the public interface for creating new instances.

    Args:
        alist_file : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
        pack : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(alist_file, code_type, iterations, sigma, update_sigma, pack):
        """
        make(std::string alist_file, int code_type, int iterations, float sigma, int update_sigma, int pack) -> decodeLDPC_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeLDPC.

        To avoid accidental use of raw pointers, ccsds::decodeLDPC's constructor is in a private implementation class. ccsds::decodeLDPC::make is the public interface for creating new instances.

        Args:
            alist_file : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
            pack : 
        """
        return _ccsds_swig.decodeLDPC_make(alist_file, code_type, iterations, sigma, update_sigma, pack)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_decodeLDPC
    __del__ = lambda self: None
decodeLDPC_swigregister = _ccsds_swig.decodeLDPC_swigregister
decodeLDPC_swigregister(decodeLDPC)

def decodeLDPC_make(alist_file, code_type, iterations, sigma, update_sigma, pack):
    """
    decodeLDPC_make(std::string alist_file, int code_type, int iterations, float sigma, int update_sigma, int pack) -> decodeLDPC_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ccsds::decodeLDPC.

    To avoid accidental use of raw pointers, ccsds::decodeLDPC's constructor is in a private implementation class. ccsds::decodeLDPC::make is the public interface for creating new instances.

    Args:
        alist_file : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
        pack : 
    """
    return _ccsds_swig.decodeLDPC_make(alist_file, code_type, iterations, sigma, update_sigma, pack)

class decodeLDPC_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::decodeLDPC)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::decodeLDPC)> self) -> decodeLDPC_sptr
        __init__(boost::shared_ptr<(gr::ccsds::decodeLDPC)> self, decodeLDPC p) -> decodeLDPC_sptr
        """
        this = _ccsds_swig.new_decodeLDPC_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decodeLDPC_sptr self) -> decodeLDPC"""
        return _ccsds_swig.decodeLDPC_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_decodeLDPC_sptr
    __del__ = lambda self: None

    def make(self, alist_file, code_type, iterations, sigma, update_sigma, pack):
        """
        make(decodeLDPC_sptr self, std::string alist_file, int code_type, int iterations, float sigma, int update_sigma, int pack) -> decodeLDPC_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ccsds::decodeLDPC.

        To avoid accidental use of raw pointers, ccsds::decodeLDPC's constructor is in a private implementation class. ccsds::decodeLDPC::make is the public interface for creating new instances.

        Args:
            alist_file : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
            pack : 
        """
        return _ccsds_swig.decodeLDPC_sptr_make(self, alist_file, code_type, iterations, sigma, update_sigma, pack)


    def history(self):
        """history(decodeLDPC_sptr self) -> unsigned int"""
        return _ccsds_swig.decodeLDPC_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decodeLDPC_sptr self, int which, int delay)
        declare_sample_delay(decodeLDPC_sptr self, unsigned int delay)
        """
        return _ccsds_swig.decodeLDPC_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decodeLDPC_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.decodeLDPC_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decodeLDPC_sptr self) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decodeLDPC_sptr self) -> double"""
        return _ccsds_swig.decodeLDPC_sptr_relative_rate(self)


    def start(self):
        """start(decodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.decodeLDPC_sptr_start(self)


    def stop(self):
        """stop(decodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.decodeLDPC_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decodeLDPC_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.decodeLDPC_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decodeLDPC_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.decodeLDPC_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decodeLDPC_sptr self) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decodeLDPC_sptr self, int m)"""
        return _ccsds_swig.decodeLDPC_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decodeLDPC_sptr self)"""
        return _ccsds_swig.decodeLDPC_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decodeLDPC_sptr self) -> bool"""
        return _ccsds_swig.decodeLDPC_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decodeLDPC_sptr self, int m)"""
        return _ccsds_swig.decodeLDPC_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decodeLDPC_sptr self) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decodeLDPC_sptr self, int i) -> long"""
        return _ccsds_swig.decodeLDPC_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decodeLDPC_sptr self, long max_output_buffer)
        set_max_output_buffer(decodeLDPC_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.decodeLDPC_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decodeLDPC_sptr self, int i) -> long"""
        return _ccsds_swig.decodeLDPC_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decodeLDPC_sptr self, long min_output_buffer)
        set_min_output_buffer(decodeLDPC_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.decodeLDPC_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full_avg(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decodeLDPC_sptr self, int which) -> float
        pc_input_buffers_full_var(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full_avg(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decodeLDPC_sptr self, int which) -> float
        pc_output_buffers_full_var(decodeLDPC_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.decodeLDPC_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decodeLDPC_sptr self) -> float"""
        return _ccsds_swig.decodeLDPC_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decodeLDPC_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.decodeLDPC_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decodeLDPC_sptr self)"""
        return _ccsds_swig.decodeLDPC_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decodeLDPC_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.decodeLDPC_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decodeLDPC_sptr self) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decodeLDPC_sptr self) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decodeLDPC_sptr self, int priority) -> int"""
        return _ccsds_swig.decodeLDPC_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.decodeLDPC_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.decodeLDPC_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decodeLDPC_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeLDPC_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decodeLDPC_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.decodeLDPC_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decodeLDPC_sptr self) -> long"""
        return _ccsds_swig.decodeLDPC_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decodeLDPC_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.decodeLDPC_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decodeLDPC_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.decodeLDPC_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decodeLDPC_sptr self) -> std::string"""
        return _ccsds_swig.decodeLDPC_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decodeLDPC_sptr self, std::string name)"""
        return _ccsds_swig.decodeLDPC_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decodeLDPC_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.decodeLDPC_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decodeLDPC_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeLDPC_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decodeLDPC_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.decodeLDPC_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decodeLDPC_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.decodeLDPC_sptr_message_subscribers(self, which_port)

decodeLDPC_sptr_swigregister = _ccsds_swig.decodeLDPC_sptr_swigregister
decodeLDPC_sptr_swigregister(decodeLDPC_sptr)


decodeLDPC_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decodeLDPC = decodeLDPC.make;



