<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lib_2fec_2ldpc_2alist_8h" kind="file" language="C++">
    <compoundname>lib/fec/ldpc/alist.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="lib_2fec_2ldpc_2ldpc_8h" local="yes">ldpc.h</includedby>
    <incdepgraph>
      <node id="640">
        <label>alist.h</label>
        <link refid="lib/fec/ldpc/alist.h"/>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
      </node>
      <node id="645">
        <label>stdlib.h</label>
      </node>
      <node id="642">
        <label>fstream</label>
      </node>
      <node id="644">
        <label>vector</label>
      </node>
      <node id="643">
        <label>sstream</label>
      </node>
      <node id="641">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="646">
        <label>alist.h</label>
        <link refid="lib/fec/ldpc/alist.h"/>
        <childnode refid="647" relation="include">
        </childnode>
      </node>
      <node id="647">
        <label>ldpc.h</label>
        <link refid="lib_2fec_2ldpc_2ldpc_8h"/>
        <childnode refid="648" relation="include">
        </childnode>
      </node>
      <node id="648">
        <label>decodeLDPC_impl.h</label>
        <link refid="decodeLDPC__impl_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classalist" prot="public">alist</innerclass>
    <briefdescription>
<para>Definition of a class to hold sparse matrices in alist-format. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Manu T S <hruler/>
</para></simplesect>
Copyright 2013 IIT Bombay.</para><para>This is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version.</para><para>This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para><para>You should have received a copy of the GNU General Public License along with this software; see the file COPYING. If not, write to the Free Software Foundation, Inc., 51 Franklin Street, Boston, MA 02110-1301, USA. <hruler/>
</para><para>This class handles sparse matrices specified in alist-format. For details about alist format please visit the link below.<itemizedlist>
<listitem><para><ulink url="http://www.inference.phy.cam.ac.uk/mackay/codes/alist.html">http://www.inference.phy.cam.ac.uk/mackay/codes/alist.html</ulink></para></listitem></itemizedlist>
</para><para>Alist class is an efficient way of representing a sparse matrix the parity check matrix H of an LDPC code for instance. </para>    </detaileddescription>
    <location file="/home/mbkitine/Dropbox/Lulea/GRC/DeepSpace/gr-ccsds/lib/fec/ldpc/alist.h"/>
  </compounddef>
</doxygen>
